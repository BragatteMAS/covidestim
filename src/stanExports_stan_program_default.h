// Generated by rstantools.  Do not edit by hand.

/*
    rstanexample is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rstanexample is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rstanexample.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_stan_program_default_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_stan_program_default");
    reader.add_event(557, 555, "end", "model_stan_program_default");
    return reader;
}
#include <stan_meta_header.hpp>
class model_stan_program_default
  : public stan::model::model_base_crtp<model_stan_program_default> {
private:
        int N_days;
        int N_days_before;
        int Max_delay;
        std::vector<int> obs_cas;
        std::vector<int> obs_die;
        std::vector<int> is_weekend;
        int N_spl_par_rt;
        matrix_d spl_basis_rt;
        int N_spl_par_dx;
        matrix_d spl_basis_dx;
        double inf_prg_delay_shap;
        double inf_prg_delay_rate;
        double asy_rec_delay_shap;
        double asy_rec_delay_rate;
        double sym_prg_delay_shap;
        double sym_prg_delay_rate;
        double sev_prg_delay_shap;
        double sev_prg_delay_rate;
        double cas_rep_delay_shap;
        double cas_rep_delay_rate;
        double die_rep_delay_shap;
        double die_rep_delay_rate;
        int cas_yes;
        int die_yes;
        int obs_cas_rep;
        int obs_die_rep;
        int N_days_av;
        double pri_log_new_inf_0_mu;
        double pri_log_new_inf_0_sd;
        double pri_logRt_mu;
        double pri_logRt_sd;
        double pri_serial_i_rate;
        double pri_serial_i_shap;
        double pri_inf_imported_mu;
        double pri_inf_imported_sd;
        double pri_deriv1_spl_par_sd;
        double pri_deriv2_spl_par_sd;
        double pri_p_sym_if_inf_a;
        double pri_p_sym_if_inf_b;
        double pri_p_sev_if_sym_a;
        double pri_p_sev_if_sym_b;
        double pri_p_die_if_sev_a;
        double pri_p_die_if_sev_b;
        double pri_p_die_if_inf_a;
        double pri_p_die_if_inf_b;
        double pri_rr_diag_asy_vs_sym_a;
        double pri_rr_diag_asy_vs_sym_b;
        double pri_rr_diag_sym_vs_sev_a;
        double pri_rr_diag_sym_vs_sev_b;
        double pri_p_diag_if_sev_a;
        double pri_p_diag_if_sev_b;
        double pri_weekend_eff_a;
        double pri_weekend_eff_b;
        double scale_dx_delay_sym_a;
        double scale_dx_delay_sym_b;
        double scale_dx_delay_sev_a;
        double scale_dx_delay_sev_b;
        int N_days_tot;
        int nda0;
        vector_d inf_prg_delay;
        vector_d asy_rec_delay;
        vector_d sym_prg_delay;
        vector_d sev_prg_delay;
        vector_d cas_rep_delay;
        vector_d die_rep_delay;
        vector_d cas_cum_report_delay;
        vector_d die_cum_report_delay;
public:
    model_stan_program_default(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_stan_program_default(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_stan_program_default_namespace::model_stan_program_default";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "N_days", "int", context__.to_vec());
            N_days = int(0);
            vals_i__ = context__.vals_i("N_days");
            pos__ = 0;
            N_days = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_days", N_days, 0);
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "N_days_before", "int", context__.to_vec());
            N_days_before = int(0);
            vals_i__ = context__.vals_i("N_days_before");
            pos__ = 0;
            N_days_before = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_days_before", N_days_before, 0);
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "Max_delay", "int", context__.to_vec());
            Max_delay = int(0);
            vals_i__ = context__.vals_i("Max_delay");
            pos__ = 0;
            Max_delay = vals_i__[pos__++];
            check_greater_or_equal(function__, "Max_delay", Max_delay, 0);
            current_statement_begin__ = 7;
            validate_non_negative_index("obs_cas", "N_days", N_days);
            context__.validate_dims("data initialization", "obs_cas", "int", context__.to_vec(N_days));
            obs_cas = std::vector<int>(N_days, int(0));
            vals_i__ = context__.vals_i("obs_cas");
            pos__ = 0;
            size_t obs_cas_k_0_max__ = N_days;
            for (size_t k_0__ = 0; k_0__ < obs_cas_k_0_max__; ++k_0__) {
                obs_cas[k_0__] = vals_i__[pos__++];
            }
            size_t obs_cas_i_0_max__ = N_days;
            for (size_t i_0__ = 0; i_0__ < obs_cas_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "obs_cas[i_0__]", obs_cas[i_0__], 0);
            }
            current_statement_begin__ = 8;
            validate_non_negative_index("obs_die", "N_days", N_days);
            context__.validate_dims("data initialization", "obs_die", "int", context__.to_vec(N_days));
            obs_die = std::vector<int>(N_days, int(0));
            vals_i__ = context__.vals_i("obs_die");
            pos__ = 0;
            size_t obs_die_k_0_max__ = N_days;
            for (size_t k_0__ = 0; k_0__ < obs_die_k_0_max__; ++k_0__) {
                obs_die[k_0__] = vals_i__[pos__++];
            }
            size_t obs_die_i_0_max__ = N_days;
            for (size_t i_0__ = 0; i_0__ < obs_die_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "obs_die[i_0__]", obs_die[i_0__], 0);
            }
            current_statement_begin__ = 10;
            validate_non_negative_index("is_weekend", "(N_days + N_days_before)", (N_days + N_days_before));
            context__.validate_dims("data initialization", "is_weekend", "int", context__.to_vec((N_days + N_days_before)));
            is_weekend = std::vector<int>((N_days + N_days_before), int(0));
            vals_i__ = context__.vals_i("is_weekend");
            pos__ = 0;
            size_t is_weekend_k_0_max__ = (N_days + N_days_before);
            for (size_t k_0__ = 0; k_0__ < is_weekend_k_0_max__; ++k_0__) {
                is_weekend[k_0__] = vals_i__[pos__++];
            }
            size_t is_weekend_i_0_max__ = (N_days + N_days_before);
            for (size_t i_0__ = 0; i_0__ < is_weekend_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "is_weekend[i_0__]", is_weekend[i_0__], 0);
                check_less_or_equal(function__, "is_weekend[i_0__]", is_weekend[i_0__], 1);
            }
            current_statement_begin__ = 14;
            context__.validate_dims("data initialization", "N_spl_par_rt", "int", context__.to_vec());
            N_spl_par_rt = int(0);
            vals_i__ = context__.vals_i("N_spl_par_rt");
            pos__ = 0;
            N_spl_par_rt = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_spl_par_rt", N_spl_par_rt, 0);
            current_statement_begin__ = 15;
            validate_non_negative_index("spl_basis_rt", "(N_days + N_days_before)", (N_days + N_days_before));
            validate_non_negative_index("spl_basis_rt", "N_spl_par_rt", N_spl_par_rt);
            context__.validate_dims("data initialization", "spl_basis_rt", "matrix_d", context__.to_vec((N_days + N_days_before),N_spl_par_rt));
            spl_basis_rt = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>((N_days + N_days_before), N_spl_par_rt);
            vals_r__ = context__.vals_r("spl_basis_rt");
            pos__ = 0;
            size_t spl_basis_rt_j_2_max__ = N_spl_par_rt;
            size_t spl_basis_rt_j_1_max__ = (N_days + N_days_before);
            for (size_t j_2__ = 0; j_2__ < spl_basis_rt_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < spl_basis_rt_j_1_max__; ++j_1__) {
                    spl_basis_rt(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 16;
            context__.validate_dims("data initialization", "N_spl_par_dx", "int", context__.to_vec());
            N_spl_par_dx = int(0);
            vals_i__ = context__.vals_i("N_spl_par_dx");
            pos__ = 0;
            N_spl_par_dx = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_spl_par_dx", N_spl_par_dx, 0);
            current_statement_begin__ = 17;
            validate_non_negative_index("spl_basis_dx", "(N_days + N_days_before)", (N_days + N_days_before));
            validate_non_negative_index("spl_basis_dx", "N_spl_par_dx", N_spl_par_dx);
            context__.validate_dims("data initialization", "spl_basis_dx", "matrix_d", context__.to_vec((N_days + N_days_before),N_spl_par_dx));
            spl_basis_dx = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>((N_days + N_days_before), N_spl_par_dx);
            vals_r__ = context__.vals_r("spl_basis_dx");
            pos__ = 0;
            size_t spl_basis_dx_j_2_max__ = N_spl_par_dx;
            size_t spl_basis_dx_j_1_max__ = (N_days + N_days_before);
            for (size_t j_2__ = 0; j_2__ < spl_basis_dx_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < spl_basis_dx_j_1_max__; ++j_1__) {
                    spl_basis_dx(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 21;
            context__.validate_dims("data initialization", "inf_prg_delay_shap", "double", context__.to_vec());
            inf_prg_delay_shap = double(0);
            vals_r__ = context__.vals_r("inf_prg_delay_shap");
            pos__ = 0;
            inf_prg_delay_shap = vals_r__[pos__++];
            check_greater_or_equal(function__, "inf_prg_delay_shap", inf_prg_delay_shap, 0);
            current_statement_begin__ = 22;
            context__.validate_dims("data initialization", "inf_prg_delay_rate", "double", context__.to_vec());
            inf_prg_delay_rate = double(0);
            vals_r__ = context__.vals_r("inf_prg_delay_rate");
            pos__ = 0;
            inf_prg_delay_rate = vals_r__[pos__++];
            check_greater_or_equal(function__, "inf_prg_delay_rate", inf_prg_delay_rate, 0);
            current_statement_begin__ = 23;
            context__.validate_dims("data initialization", "asy_rec_delay_shap", "double", context__.to_vec());
            asy_rec_delay_shap = double(0);
            vals_r__ = context__.vals_r("asy_rec_delay_shap");
            pos__ = 0;
            asy_rec_delay_shap = vals_r__[pos__++];
            check_greater_or_equal(function__, "asy_rec_delay_shap", asy_rec_delay_shap, 0);
            current_statement_begin__ = 24;
            context__.validate_dims("data initialization", "asy_rec_delay_rate", "double", context__.to_vec());
            asy_rec_delay_rate = double(0);
            vals_r__ = context__.vals_r("asy_rec_delay_rate");
            pos__ = 0;
            asy_rec_delay_rate = vals_r__[pos__++];
            check_greater_or_equal(function__, "asy_rec_delay_rate", asy_rec_delay_rate, 0);
            current_statement_begin__ = 25;
            context__.validate_dims("data initialization", "sym_prg_delay_shap", "double", context__.to_vec());
            sym_prg_delay_shap = double(0);
            vals_r__ = context__.vals_r("sym_prg_delay_shap");
            pos__ = 0;
            sym_prg_delay_shap = vals_r__[pos__++];
            check_greater_or_equal(function__, "sym_prg_delay_shap", sym_prg_delay_shap, 0);
            current_statement_begin__ = 26;
            context__.validate_dims("data initialization", "sym_prg_delay_rate", "double", context__.to_vec());
            sym_prg_delay_rate = double(0);
            vals_r__ = context__.vals_r("sym_prg_delay_rate");
            pos__ = 0;
            sym_prg_delay_rate = vals_r__[pos__++];
            check_greater_or_equal(function__, "sym_prg_delay_rate", sym_prg_delay_rate, 0);
            current_statement_begin__ = 27;
            context__.validate_dims("data initialization", "sev_prg_delay_shap", "double", context__.to_vec());
            sev_prg_delay_shap = double(0);
            vals_r__ = context__.vals_r("sev_prg_delay_shap");
            pos__ = 0;
            sev_prg_delay_shap = vals_r__[pos__++];
            check_greater_or_equal(function__, "sev_prg_delay_shap", sev_prg_delay_shap, 0);
            current_statement_begin__ = 28;
            context__.validate_dims("data initialization", "sev_prg_delay_rate", "double", context__.to_vec());
            sev_prg_delay_rate = double(0);
            vals_r__ = context__.vals_r("sev_prg_delay_rate");
            pos__ = 0;
            sev_prg_delay_rate = vals_r__[pos__++];
            check_greater_or_equal(function__, "sev_prg_delay_rate", sev_prg_delay_rate, 0);
            current_statement_begin__ = 30;
            context__.validate_dims("data initialization", "cas_rep_delay_shap", "double", context__.to_vec());
            cas_rep_delay_shap = double(0);
            vals_r__ = context__.vals_r("cas_rep_delay_shap");
            pos__ = 0;
            cas_rep_delay_shap = vals_r__[pos__++];
            check_greater_or_equal(function__, "cas_rep_delay_shap", cas_rep_delay_shap, 0);
            current_statement_begin__ = 31;
            context__.validate_dims("data initialization", "cas_rep_delay_rate", "double", context__.to_vec());
            cas_rep_delay_rate = double(0);
            vals_r__ = context__.vals_r("cas_rep_delay_rate");
            pos__ = 0;
            cas_rep_delay_rate = vals_r__[pos__++];
            check_greater_or_equal(function__, "cas_rep_delay_rate", cas_rep_delay_rate, 0);
            current_statement_begin__ = 32;
            context__.validate_dims("data initialization", "die_rep_delay_shap", "double", context__.to_vec());
            die_rep_delay_shap = double(0);
            vals_r__ = context__.vals_r("die_rep_delay_shap");
            pos__ = 0;
            die_rep_delay_shap = vals_r__[pos__++];
            check_greater_or_equal(function__, "die_rep_delay_shap", die_rep_delay_shap, 0);
            current_statement_begin__ = 33;
            context__.validate_dims("data initialization", "die_rep_delay_rate", "double", context__.to_vec());
            die_rep_delay_rate = double(0);
            vals_r__ = context__.vals_r("die_rep_delay_rate");
            pos__ = 0;
            die_rep_delay_rate = vals_r__[pos__++];
            check_greater_or_equal(function__, "die_rep_delay_rate", die_rep_delay_rate, 0);
            current_statement_begin__ = 37;
            context__.validate_dims("data initialization", "cas_yes", "int", context__.to_vec());
            cas_yes = int(0);
            vals_i__ = context__.vals_i("cas_yes");
            pos__ = 0;
            cas_yes = vals_i__[pos__++];
            check_greater_or_equal(function__, "cas_yes", cas_yes, 0);
            check_less_or_equal(function__, "cas_yes", cas_yes, 1);
            current_statement_begin__ = 38;
            context__.validate_dims("data initialization", "die_yes", "int", context__.to_vec());
            die_yes = int(0);
            vals_i__ = context__.vals_i("die_yes");
            pos__ = 0;
            die_yes = vals_i__[pos__++];
            check_greater_or_equal(function__, "die_yes", die_yes, 0);
            check_less_or_equal(function__, "die_yes", die_yes, 1);
            current_statement_begin__ = 40;
            context__.validate_dims("data initialization", "obs_cas_rep", "int", context__.to_vec());
            obs_cas_rep = int(0);
            vals_i__ = context__.vals_i("obs_cas_rep");
            pos__ = 0;
            obs_cas_rep = vals_i__[pos__++];
            check_greater_or_equal(function__, "obs_cas_rep", obs_cas_rep, 0);
            check_less_or_equal(function__, "obs_cas_rep", obs_cas_rep, 1);
            current_statement_begin__ = 41;
            context__.validate_dims("data initialization", "obs_die_rep", "int", context__.to_vec());
            obs_die_rep = int(0);
            vals_i__ = context__.vals_i("obs_die_rep");
            pos__ = 0;
            obs_die_rep = vals_i__[pos__++];
            check_greater_or_equal(function__, "obs_die_rep", obs_die_rep, 0);
            check_less_or_equal(function__, "obs_die_rep", obs_die_rep, 1);
            current_statement_begin__ = 44;
            context__.validate_dims("data initialization", "N_days_av", "int", context__.to_vec());
            N_days_av = int(0);
            vals_i__ = context__.vals_i("N_days_av");
            pos__ = 0;
            N_days_av = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_days_av", N_days_av, 1);
            check_less_or_equal(function__, "N_days_av", N_days_av, 10);
            current_statement_begin__ = 49;
            context__.validate_dims("data initialization", "pri_log_new_inf_0_mu", "double", context__.to_vec());
            pri_log_new_inf_0_mu = double(0);
            vals_r__ = context__.vals_r("pri_log_new_inf_0_mu");
            pos__ = 0;
            pri_log_new_inf_0_mu = vals_r__[pos__++];
            current_statement_begin__ = 50;
            context__.validate_dims("data initialization", "pri_log_new_inf_0_sd", "double", context__.to_vec());
            pri_log_new_inf_0_sd = double(0);
            vals_r__ = context__.vals_r("pri_log_new_inf_0_sd");
            pos__ = 0;
            pri_log_new_inf_0_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_log_new_inf_0_sd", pri_log_new_inf_0_sd, 0);
            current_statement_begin__ = 51;
            context__.validate_dims("data initialization", "pri_logRt_mu", "double", context__.to_vec());
            pri_logRt_mu = double(0);
            vals_r__ = context__.vals_r("pri_logRt_mu");
            pos__ = 0;
            pri_logRt_mu = vals_r__[pos__++];
            current_statement_begin__ = 52;
            context__.validate_dims("data initialization", "pri_logRt_sd", "double", context__.to_vec());
            pri_logRt_sd = double(0);
            vals_r__ = context__.vals_r("pri_logRt_sd");
            pos__ = 0;
            pri_logRt_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_logRt_sd", pri_logRt_sd, 0);
            current_statement_begin__ = 53;
            context__.validate_dims("data initialization", "pri_serial_i_rate", "double", context__.to_vec());
            pri_serial_i_rate = double(0);
            vals_r__ = context__.vals_r("pri_serial_i_rate");
            pos__ = 0;
            pri_serial_i_rate = vals_r__[pos__++];
            current_statement_begin__ = 54;
            context__.validate_dims("data initialization", "pri_serial_i_shap", "double", context__.to_vec());
            pri_serial_i_shap = double(0);
            vals_r__ = context__.vals_r("pri_serial_i_shap");
            pos__ = 0;
            pri_serial_i_shap = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_serial_i_shap", pri_serial_i_shap, 0);
            current_statement_begin__ = 55;
            context__.validate_dims("data initialization", "pri_inf_imported_mu", "double", context__.to_vec());
            pri_inf_imported_mu = double(0);
            vals_r__ = context__.vals_r("pri_inf_imported_mu");
            pos__ = 0;
            pri_inf_imported_mu = vals_r__[pos__++];
            current_statement_begin__ = 56;
            context__.validate_dims("data initialization", "pri_inf_imported_sd", "double", context__.to_vec());
            pri_inf_imported_sd = double(0);
            vals_r__ = context__.vals_r("pri_inf_imported_sd");
            pos__ = 0;
            pri_inf_imported_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_inf_imported_sd", pri_inf_imported_sd, 0);
            current_statement_begin__ = 57;
            context__.validate_dims("data initialization", "pri_deriv1_spl_par_sd", "double", context__.to_vec());
            pri_deriv1_spl_par_sd = double(0);
            vals_r__ = context__.vals_r("pri_deriv1_spl_par_sd");
            pos__ = 0;
            pri_deriv1_spl_par_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_deriv1_spl_par_sd", pri_deriv1_spl_par_sd, 0);
            current_statement_begin__ = 58;
            context__.validate_dims("data initialization", "pri_deriv2_spl_par_sd", "double", context__.to_vec());
            pri_deriv2_spl_par_sd = double(0);
            vals_r__ = context__.vals_r("pri_deriv2_spl_par_sd");
            pos__ = 0;
            pri_deriv2_spl_par_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_deriv2_spl_par_sd", pri_deriv2_spl_par_sd, 0);
            current_statement_begin__ = 61;
            context__.validate_dims("data initialization", "pri_p_sym_if_inf_a", "double", context__.to_vec());
            pri_p_sym_if_inf_a = double(0);
            vals_r__ = context__.vals_r("pri_p_sym_if_inf_a");
            pos__ = 0;
            pri_p_sym_if_inf_a = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_p_sym_if_inf_a", pri_p_sym_if_inf_a, 0);
            current_statement_begin__ = 62;
            context__.validate_dims("data initialization", "pri_p_sym_if_inf_b", "double", context__.to_vec());
            pri_p_sym_if_inf_b = double(0);
            vals_r__ = context__.vals_r("pri_p_sym_if_inf_b");
            pos__ = 0;
            pri_p_sym_if_inf_b = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_p_sym_if_inf_b", pri_p_sym_if_inf_b, 0);
            current_statement_begin__ = 63;
            context__.validate_dims("data initialization", "pri_p_sev_if_sym_a", "double", context__.to_vec());
            pri_p_sev_if_sym_a = double(0);
            vals_r__ = context__.vals_r("pri_p_sev_if_sym_a");
            pos__ = 0;
            pri_p_sev_if_sym_a = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_p_sev_if_sym_a", pri_p_sev_if_sym_a, 0);
            current_statement_begin__ = 64;
            context__.validate_dims("data initialization", "pri_p_sev_if_sym_b", "double", context__.to_vec());
            pri_p_sev_if_sym_b = double(0);
            vals_r__ = context__.vals_r("pri_p_sev_if_sym_b");
            pos__ = 0;
            pri_p_sev_if_sym_b = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_p_sev_if_sym_b", pri_p_sev_if_sym_b, 0);
            current_statement_begin__ = 65;
            context__.validate_dims("data initialization", "pri_p_die_if_sev_a", "double", context__.to_vec());
            pri_p_die_if_sev_a = double(0);
            vals_r__ = context__.vals_r("pri_p_die_if_sev_a");
            pos__ = 0;
            pri_p_die_if_sev_a = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_p_die_if_sev_a", pri_p_die_if_sev_a, 0);
            current_statement_begin__ = 66;
            context__.validate_dims("data initialization", "pri_p_die_if_sev_b", "double", context__.to_vec());
            pri_p_die_if_sev_b = double(0);
            vals_r__ = context__.vals_r("pri_p_die_if_sev_b");
            pos__ = 0;
            pri_p_die_if_sev_b = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_p_die_if_sev_b", pri_p_die_if_sev_b, 0);
            current_statement_begin__ = 68;
            context__.validate_dims("data initialization", "pri_p_die_if_inf_a", "double", context__.to_vec());
            pri_p_die_if_inf_a = double(0);
            vals_r__ = context__.vals_r("pri_p_die_if_inf_a");
            pos__ = 0;
            pri_p_die_if_inf_a = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_p_die_if_inf_a", pri_p_die_if_inf_a, 0);
            current_statement_begin__ = 69;
            context__.validate_dims("data initialization", "pri_p_die_if_inf_b", "double", context__.to_vec());
            pri_p_die_if_inf_b = double(0);
            vals_r__ = context__.vals_r("pri_p_die_if_inf_b");
            pos__ = 0;
            pri_p_die_if_inf_b = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_p_die_if_inf_b", pri_p_die_if_inf_b, 0);
            current_statement_begin__ = 72;
            context__.validate_dims("data initialization", "pri_rr_diag_asy_vs_sym_a", "double", context__.to_vec());
            pri_rr_diag_asy_vs_sym_a = double(0);
            vals_r__ = context__.vals_r("pri_rr_diag_asy_vs_sym_a");
            pos__ = 0;
            pri_rr_diag_asy_vs_sym_a = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_rr_diag_asy_vs_sym_a", pri_rr_diag_asy_vs_sym_a, 0);
            current_statement_begin__ = 73;
            context__.validate_dims("data initialization", "pri_rr_diag_asy_vs_sym_b", "double", context__.to_vec());
            pri_rr_diag_asy_vs_sym_b = double(0);
            vals_r__ = context__.vals_r("pri_rr_diag_asy_vs_sym_b");
            pos__ = 0;
            pri_rr_diag_asy_vs_sym_b = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_rr_diag_asy_vs_sym_b", pri_rr_diag_asy_vs_sym_b, 0);
            current_statement_begin__ = 75;
            context__.validate_dims("data initialization", "pri_rr_diag_sym_vs_sev_a", "double", context__.to_vec());
            pri_rr_diag_sym_vs_sev_a = double(0);
            vals_r__ = context__.vals_r("pri_rr_diag_sym_vs_sev_a");
            pos__ = 0;
            pri_rr_diag_sym_vs_sev_a = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_rr_diag_sym_vs_sev_a", pri_rr_diag_sym_vs_sev_a, 0);
            current_statement_begin__ = 76;
            context__.validate_dims("data initialization", "pri_rr_diag_sym_vs_sev_b", "double", context__.to_vec());
            pri_rr_diag_sym_vs_sev_b = double(0);
            vals_r__ = context__.vals_r("pri_rr_diag_sym_vs_sev_b");
            pos__ = 0;
            pri_rr_diag_sym_vs_sev_b = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_rr_diag_sym_vs_sev_b", pri_rr_diag_sym_vs_sev_b, 0);
            current_statement_begin__ = 78;
            context__.validate_dims("data initialization", "pri_p_diag_if_sev_a", "double", context__.to_vec());
            pri_p_diag_if_sev_a = double(0);
            vals_r__ = context__.vals_r("pri_p_diag_if_sev_a");
            pos__ = 0;
            pri_p_diag_if_sev_a = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_p_diag_if_sev_a", pri_p_diag_if_sev_a, 0);
            current_statement_begin__ = 79;
            context__.validate_dims("data initialization", "pri_p_diag_if_sev_b", "double", context__.to_vec());
            pri_p_diag_if_sev_b = double(0);
            vals_r__ = context__.vals_r("pri_p_diag_if_sev_b");
            pos__ = 0;
            pri_p_diag_if_sev_b = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_p_diag_if_sev_b", pri_p_diag_if_sev_b, 0);
            current_statement_begin__ = 81;
            context__.validate_dims("data initialization", "pri_weekend_eff_a", "double", context__.to_vec());
            pri_weekend_eff_a = double(0);
            vals_r__ = context__.vals_r("pri_weekend_eff_a");
            pos__ = 0;
            pri_weekend_eff_a = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_weekend_eff_a", pri_weekend_eff_a, 0);
            current_statement_begin__ = 82;
            context__.validate_dims("data initialization", "pri_weekend_eff_b", "double", context__.to_vec());
            pri_weekend_eff_b = double(0);
            vals_r__ = context__.vals_r("pri_weekend_eff_b");
            pos__ = 0;
            pri_weekend_eff_b = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_weekend_eff_b", pri_weekend_eff_b, 0);
            current_statement_begin__ = 85;
            context__.validate_dims("data initialization", "scale_dx_delay_sym_a", "double", context__.to_vec());
            scale_dx_delay_sym_a = double(0);
            vals_r__ = context__.vals_r("scale_dx_delay_sym_a");
            pos__ = 0;
            scale_dx_delay_sym_a = vals_r__[pos__++];
            check_greater_or_equal(function__, "scale_dx_delay_sym_a", scale_dx_delay_sym_a, 0);
            current_statement_begin__ = 86;
            context__.validate_dims("data initialization", "scale_dx_delay_sym_b", "double", context__.to_vec());
            scale_dx_delay_sym_b = double(0);
            vals_r__ = context__.vals_r("scale_dx_delay_sym_b");
            pos__ = 0;
            scale_dx_delay_sym_b = vals_r__[pos__++];
            check_greater_or_equal(function__, "scale_dx_delay_sym_b", scale_dx_delay_sym_b, 0);
            current_statement_begin__ = 87;
            context__.validate_dims("data initialization", "scale_dx_delay_sev_a", "double", context__.to_vec());
            scale_dx_delay_sev_a = double(0);
            vals_r__ = context__.vals_r("scale_dx_delay_sev_a");
            pos__ = 0;
            scale_dx_delay_sev_a = vals_r__[pos__++];
            check_greater_or_equal(function__, "scale_dx_delay_sev_a", scale_dx_delay_sev_a, 0);
            current_statement_begin__ = 88;
            context__.validate_dims("data initialization", "scale_dx_delay_sev_b", "double", context__.to_vec());
            scale_dx_delay_sev_b = double(0);
            vals_r__ = context__.vals_r("scale_dx_delay_sev_b");
            pos__ = 0;
            scale_dx_delay_sev_b = vals_r__[pos__++];
            check_greater_or_equal(function__, "scale_dx_delay_sev_b", scale_dx_delay_sev_b, 0);
            // initialize transformed data variables
            current_statement_begin__ = 93;
            N_days_tot = int(0);
            stan::math::fill(N_days_tot, std::numeric_limits<int>::min());
            current_statement_begin__ = 94;
            nda0 = int(0);
            stan::math::fill(nda0, std::numeric_limits<int>::min());
            current_statement_begin__ = 97;
            validate_non_negative_index("inf_prg_delay", "Max_delay", Max_delay);
            inf_prg_delay = Eigen::Matrix<double, Eigen::Dynamic, 1>(Max_delay);
            stan::math::fill(inf_prg_delay, DUMMY_VAR__);
            current_statement_begin__ = 98;
            validate_non_negative_index("asy_rec_delay", "Max_delay", Max_delay);
            asy_rec_delay = Eigen::Matrix<double, Eigen::Dynamic, 1>(Max_delay);
            stan::math::fill(asy_rec_delay, DUMMY_VAR__);
            current_statement_begin__ = 99;
            validate_non_negative_index("sym_prg_delay", "Max_delay", Max_delay);
            sym_prg_delay = Eigen::Matrix<double, Eigen::Dynamic, 1>(Max_delay);
            stan::math::fill(sym_prg_delay, DUMMY_VAR__);
            current_statement_begin__ = 100;
            validate_non_negative_index("sev_prg_delay", "Max_delay", Max_delay);
            sev_prg_delay = Eigen::Matrix<double, Eigen::Dynamic, 1>(Max_delay);
            stan::math::fill(sev_prg_delay, DUMMY_VAR__);
            current_statement_begin__ = 102;
            validate_non_negative_index("cas_rep_delay", "Max_delay", Max_delay);
            cas_rep_delay = Eigen::Matrix<double, Eigen::Dynamic, 1>(Max_delay);
            stan::math::fill(cas_rep_delay, DUMMY_VAR__);
            current_statement_begin__ = 103;
            validate_non_negative_index("die_rep_delay", "Max_delay", Max_delay);
            die_rep_delay = Eigen::Matrix<double, Eigen::Dynamic, 1>(Max_delay);
            stan::math::fill(die_rep_delay, DUMMY_VAR__);
            current_statement_begin__ = 105;
            validate_non_negative_index("cas_cum_report_delay", "Max_delay", Max_delay);
            cas_cum_report_delay = Eigen::Matrix<double, Eigen::Dynamic, 1>(Max_delay);
            stan::math::fill(cas_cum_report_delay, DUMMY_VAR__);
            current_statement_begin__ = 106;
            validate_non_negative_index("die_cum_report_delay", "Max_delay", Max_delay);
            die_cum_report_delay = Eigen::Matrix<double, Eigen::Dynamic, 1>(Max_delay);
            stan::math::fill(die_cum_report_delay, DUMMY_VAR__);
            // execute transformed data statements
            current_statement_begin__ = 109;
            stan::math::assign(nda0, (N_days_av - 1));
            current_statement_begin__ = 113;
            stan::math::assign(N_days_tot, (N_days + N_days_before));
            current_statement_begin__ = 117;
            for (int i = 1; i <= Max_delay; ++i) {
                current_statement_begin__ = 118;
                stan::model::assign(inf_prg_delay, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (gamma_cdf((i + 0.0), inf_prg_delay_shap, inf_prg_delay_rate) - gamma_cdf((i - 1.0), inf_prg_delay_shap, inf_prg_delay_rate)), 
                            "assigning variable inf_prg_delay");
                current_statement_begin__ = 120;
                stan::model::assign(asy_rec_delay, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (gamma_cdf((i + 0.0), asy_rec_delay_shap, (asy_rec_delay_rate * 2)) - gamma_cdf((i - 1.0), asy_rec_delay_shap, (asy_rec_delay_rate * 2))), 
                            "assigning variable asy_rec_delay");
                current_statement_begin__ = 124;
                stan::model::assign(sym_prg_delay, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (gamma_cdf((i + 0.0), sym_prg_delay_shap, sym_prg_delay_rate) - gamma_cdf((i - 1.0), sym_prg_delay_shap, sym_prg_delay_rate)), 
                            "assigning variable sym_prg_delay");
                current_statement_begin__ = 126;
                stan::model::assign(sev_prg_delay, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (gamma_cdf((i + 0.0), sev_prg_delay_shap, sev_prg_delay_rate) - gamma_cdf((i - 1.0), sev_prg_delay_shap, sev_prg_delay_rate)), 
                            "assigning variable sev_prg_delay");
            }
            current_statement_begin__ = 132;
            for (int i = 1; i <= Max_delay; ++i) {
                current_statement_begin__ = 133;
                stan::model::assign(cas_rep_delay, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (gamma_cdf((i + 0.0), cas_rep_delay_shap, cas_rep_delay_rate) - gamma_cdf((i - 1.0), cas_rep_delay_shap, cas_rep_delay_rate)), 
                            "assigning variable cas_rep_delay");
                current_statement_begin__ = 135;
                stan::model::assign(die_rep_delay, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (gamma_cdf((i + 0.0), die_rep_delay_shap, die_rep_delay_rate) - gamma_cdf((i - 1.0), die_rep_delay_shap, die_rep_delay_rate)), 
                            "assigning variable die_rep_delay");
            }
            current_statement_begin__ = 142;
            stan::math::assign(cas_cum_report_delay, cumulative_sum(cas_rep_delay));
            current_statement_begin__ = 143;
            stan::math::assign(die_cum_report_delay, cumulative_sum(die_rep_delay));
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 149;
            num_params_r__ += 1;
            current_statement_begin__ = 150;
            num_params_r__ += 1;
            current_statement_begin__ = 151;
            validate_non_negative_index("spl_par_rt", "N_spl_par_rt", N_spl_par_rt);
            num_params_r__ += N_spl_par_rt;
            current_statement_begin__ = 152;
            num_params_r__ += 1;
            current_statement_begin__ = 156;
            num_params_r__ += 1;
            current_statement_begin__ = 157;
            num_params_r__ += 1;
            current_statement_begin__ = 158;
            num_params_r__ += 1;
            current_statement_begin__ = 162;
            num_params_r__ += 1;
            current_statement_begin__ = 163;
            num_params_r__ += 1;
            current_statement_begin__ = 164;
            num_params_r__ += 1;
            current_statement_begin__ = 166;
            num_params_r__ += 1;
            current_statement_begin__ = 167;
            num_params_r__ += 1;
            current_statement_begin__ = 168;
            validate_non_negative_index("spl_par_sym_dx", "N_spl_par_dx", N_spl_par_dx);
            num_params_r__ += N_spl_par_dx;
            current_statement_begin__ = 169;
            num_params_r__ += 1;
            current_statement_begin__ = 173;
            num_params_r__ += 1;
            current_statement_begin__ = 174;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_stan_program_default() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 149;
        if (!(context__.contains_r("log_new_inf_0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable log_new_inf_0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("log_new_inf_0");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "log_new_inf_0", "double", context__.to_vec());
        double log_new_inf_0(0);
        log_new_inf_0 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(log_new_inf_0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable log_new_inf_0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 150;
        if (!(context__.contains_r("serial_i")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable serial_i missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("serial_i");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "serial_i", "double", context__.to_vec());
        double serial_i(0);
        serial_i = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, serial_i);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable serial_i: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 151;
        if (!(context__.contains_r("spl_par_rt")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable spl_par_rt missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("spl_par_rt");
        pos__ = 0U;
        validate_non_negative_index("spl_par_rt", "N_spl_par_rt", N_spl_par_rt);
        context__.validate_dims("parameter initialization", "spl_par_rt", "vector_d", context__.to_vec(N_spl_par_rt));
        Eigen::Matrix<double, Eigen::Dynamic, 1> spl_par_rt(N_spl_par_rt);
        size_t spl_par_rt_j_1_max__ = N_spl_par_rt;
        for (size_t j_1__ = 0; j_1__ < spl_par_rt_j_1_max__; ++j_1__) {
            spl_par_rt(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(spl_par_rt);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable spl_par_rt: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 152;
        if (!(context__.contains_r("inf_imported")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable inf_imported missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("inf_imported");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "inf_imported", "double", context__.to_vec());
        double inf_imported(0);
        inf_imported = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, inf_imported);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable inf_imported: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 156;
        if (!(context__.contains_r("p_sym_if_inf")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable p_sym_if_inf missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("p_sym_if_inf");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "p_sym_if_inf", "double", context__.to_vec());
        double p_sym_if_inf(0);
        p_sym_if_inf = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, p_sym_if_inf);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable p_sym_if_inf: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 157;
        if (!(context__.contains_r("p_sev_if_sym")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable p_sev_if_sym missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("p_sev_if_sym");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "p_sev_if_sym", "double", context__.to_vec());
        double p_sev_if_sym(0);
        p_sev_if_sym = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, p_sev_if_sym);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable p_sev_if_sym: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 158;
        if (!(context__.contains_r("p_die_if_sev")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable p_die_if_sev missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("p_die_if_sev");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "p_die_if_sev", "double", context__.to_vec());
        double p_die_if_sev(0);
        p_die_if_sev = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, p_die_if_sev);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable p_die_if_sev: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 162;
        if (!(context__.contains_r("scale_dx_delay_asy")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable scale_dx_delay_asy missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("scale_dx_delay_asy");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "scale_dx_delay_asy", "double", context__.to_vec());
        double scale_dx_delay_asy(0);
        scale_dx_delay_asy = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, scale_dx_delay_asy);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable scale_dx_delay_asy: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 163;
        if (!(context__.contains_r("scale_dx_delay_sym")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable scale_dx_delay_sym missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("scale_dx_delay_sym");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "scale_dx_delay_sym", "double", context__.to_vec());
        double scale_dx_delay_sym(0);
        scale_dx_delay_sym = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, scale_dx_delay_sym);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable scale_dx_delay_sym: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 164;
        if (!(context__.contains_r("scale_dx_delay_sev")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable scale_dx_delay_sev missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("scale_dx_delay_sev");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "scale_dx_delay_sev", "double", context__.to_vec());
        double scale_dx_delay_sev(0);
        scale_dx_delay_sev = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, scale_dx_delay_sev);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable scale_dx_delay_sev: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 166;
        if (!(context__.contains_r("rr_diag_asy_vs_sym")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rr_diag_asy_vs_sym missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rr_diag_asy_vs_sym");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "rr_diag_asy_vs_sym", "double", context__.to_vec());
        double rr_diag_asy_vs_sym(0);
        rr_diag_asy_vs_sym = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, rr_diag_asy_vs_sym);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rr_diag_asy_vs_sym: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 167;
        if (!(context__.contains_r("p_diag_if_sev")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable p_diag_if_sev missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("p_diag_if_sev");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "p_diag_if_sev", "double", context__.to_vec());
        double p_diag_if_sev(0);
        p_diag_if_sev = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, p_diag_if_sev);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable p_diag_if_sev: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 168;
        if (!(context__.contains_r("spl_par_sym_dx")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable spl_par_sym_dx missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("spl_par_sym_dx");
        pos__ = 0U;
        validate_non_negative_index("spl_par_sym_dx", "N_spl_par_dx", N_spl_par_dx);
        context__.validate_dims("parameter initialization", "spl_par_sym_dx", "vector_d", context__.to_vec(N_spl_par_dx));
        Eigen::Matrix<double, Eigen::Dynamic, 1> spl_par_sym_dx(N_spl_par_dx);
        size_t spl_par_sym_dx_j_1_max__ = N_spl_par_dx;
        for (size_t j_1__ = 0; j_1__ < spl_par_sym_dx_j_1_max__; ++j_1__) {
            spl_par_sym_dx(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(spl_par_sym_dx);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable spl_par_sym_dx: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 169;
        if (!(context__.contains_r("weekend_eff")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable weekend_eff missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("weekend_eff");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "weekend_eff", "double", context__.to_vec());
        double weekend_eff(0);
        weekend_eff = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, weekend_eff);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable weekend_eff: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 173;
        if (!(context__.contains_r("inv_sqrt_phi_c")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable inv_sqrt_phi_c missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("inv_sqrt_phi_c");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "inv_sqrt_phi_c", "double", context__.to_vec());
        double inv_sqrt_phi_c(0);
        inv_sqrt_phi_c = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, inv_sqrt_phi_c);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable inv_sqrt_phi_c: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 174;
        if (!(context__.contains_r("inv_sqrt_phi_d")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable inv_sqrt_phi_d missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("inv_sqrt_phi_d");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "inv_sqrt_phi_d", "double", context__.to_vec());
        double inv_sqrt_phi_d(0);
        inv_sqrt_phi_d = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, inv_sqrt_phi_d);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable inv_sqrt_phi_d: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 149;
            local_scalar_t__ log_new_inf_0;
            (void) log_new_inf_0;  // dummy to suppress unused var warning
            if (jacobian__)
                log_new_inf_0 = in__.scalar_constrain(lp__);
            else
                log_new_inf_0 = in__.scalar_constrain();
            current_statement_begin__ = 150;
            local_scalar_t__ serial_i;
            (void) serial_i;  // dummy to suppress unused var warning
            if (jacobian__)
                serial_i = in__.scalar_lb_constrain(0, lp__);
            else
                serial_i = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 151;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> spl_par_rt;
            (void) spl_par_rt;  // dummy to suppress unused var warning
            if (jacobian__)
                spl_par_rt = in__.vector_constrain(N_spl_par_rt, lp__);
            else
                spl_par_rt = in__.vector_constrain(N_spl_par_rt);
            current_statement_begin__ = 152;
            local_scalar_t__ inf_imported;
            (void) inf_imported;  // dummy to suppress unused var warning
            if (jacobian__)
                inf_imported = in__.scalar_lb_constrain(0, lp__);
            else
                inf_imported = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 156;
            local_scalar_t__ p_sym_if_inf;
            (void) p_sym_if_inf;  // dummy to suppress unused var warning
            if (jacobian__)
                p_sym_if_inf = in__.scalar_lub_constrain(0, 1, lp__);
            else
                p_sym_if_inf = in__.scalar_lub_constrain(0, 1);
            current_statement_begin__ = 157;
            local_scalar_t__ p_sev_if_sym;
            (void) p_sev_if_sym;  // dummy to suppress unused var warning
            if (jacobian__)
                p_sev_if_sym = in__.scalar_lub_constrain(0, 1, lp__);
            else
                p_sev_if_sym = in__.scalar_lub_constrain(0, 1);
            current_statement_begin__ = 158;
            local_scalar_t__ p_die_if_sev;
            (void) p_die_if_sev;  // dummy to suppress unused var warning
            if (jacobian__)
                p_die_if_sev = in__.scalar_lub_constrain(0, 1, lp__);
            else
                p_die_if_sev = in__.scalar_lub_constrain(0, 1);
            current_statement_begin__ = 162;
            local_scalar_t__ scale_dx_delay_asy;
            (void) scale_dx_delay_asy;  // dummy to suppress unused var warning
            if (jacobian__)
                scale_dx_delay_asy = in__.scalar_lub_constrain(0, 1, lp__);
            else
                scale_dx_delay_asy = in__.scalar_lub_constrain(0, 1);
            current_statement_begin__ = 163;
            local_scalar_t__ scale_dx_delay_sym;
            (void) scale_dx_delay_sym;  // dummy to suppress unused var warning
            if (jacobian__)
                scale_dx_delay_sym = in__.scalar_lub_constrain(0, 1, lp__);
            else
                scale_dx_delay_sym = in__.scalar_lub_constrain(0, 1);
            current_statement_begin__ = 164;
            local_scalar_t__ scale_dx_delay_sev;
            (void) scale_dx_delay_sev;  // dummy to suppress unused var warning
            if (jacobian__)
                scale_dx_delay_sev = in__.scalar_lub_constrain(0, 1, lp__);
            else
                scale_dx_delay_sev = in__.scalar_lub_constrain(0, 1);
            current_statement_begin__ = 166;
            local_scalar_t__ rr_diag_asy_vs_sym;
            (void) rr_diag_asy_vs_sym;  // dummy to suppress unused var warning
            if (jacobian__)
                rr_diag_asy_vs_sym = in__.scalar_lub_constrain(0, 1, lp__);
            else
                rr_diag_asy_vs_sym = in__.scalar_lub_constrain(0, 1);
            current_statement_begin__ = 167;
            local_scalar_t__ p_diag_if_sev;
            (void) p_diag_if_sev;  // dummy to suppress unused var warning
            if (jacobian__)
                p_diag_if_sev = in__.scalar_lub_constrain(0, 1, lp__);
            else
                p_diag_if_sev = in__.scalar_lub_constrain(0, 1);
            current_statement_begin__ = 168;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> spl_par_sym_dx;
            (void) spl_par_sym_dx;  // dummy to suppress unused var warning
            if (jacobian__)
                spl_par_sym_dx = in__.vector_constrain(N_spl_par_dx, lp__);
            else
                spl_par_sym_dx = in__.vector_constrain(N_spl_par_dx);
            current_statement_begin__ = 169;
            local_scalar_t__ weekend_eff;
            (void) weekend_eff;  // dummy to suppress unused var warning
            if (jacobian__)
                weekend_eff = in__.scalar_lub_constrain(0, 1, lp__);
            else
                weekend_eff = in__.scalar_lub_constrain(0, 1);
            current_statement_begin__ = 173;
            local_scalar_t__ inv_sqrt_phi_c;
            (void) inv_sqrt_phi_c;  // dummy to suppress unused var warning
            if (jacobian__)
                inv_sqrt_phi_c = in__.scalar_lb_constrain(0, lp__);
            else
                inv_sqrt_phi_c = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 174;
            local_scalar_t__ inv_sqrt_phi_d;
            (void) inv_sqrt_phi_d;  // dummy to suppress unused var warning
            if (jacobian__)
                inv_sqrt_phi_d = in__.scalar_lb_constrain(0, lp__);
            else
                inv_sqrt_phi_d = in__.scalar_lb_constrain(0);
            // transformed parameters
            current_statement_begin__ = 182;
            validate_non_negative_index("log_new_inf", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_new_inf(N_days_tot);
            stan::math::initialize(log_new_inf, DUMMY_VAR__);
            stan::math::fill(log_new_inf, DUMMY_VAR__);
            current_statement_begin__ = 183;
            validate_non_negative_index("new_inf", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> new_inf(N_days_tot);
            stan::math::initialize(new_inf, DUMMY_VAR__);
            stan::math::fill(new_inf, DUMMY_VAR__);
            current_statement_begin__ = 184;
            validate_non_negative_index("deriv1_log_new_inf", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> deriv1_log_new_inf(N_days_tot);
            stan::math::initialize(deriv1_log_new_inf, DUMMY_VAR__);
            stan::math::fill(deriv1_log_new_inf, DUMMY_VAR__);
            current_statement_begin__ = 187;
            validate_non_negative_index("logRt", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> logRt(N_days_tot);
            stan::math::initialize(logRt, DUMMY_VAR__);
            stan::math::fill(logRt, DUMMY_VAR__);
            current_statement_begin__ = 188;
            validate_non_negative_index("Rt", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> Rt(N_days_tot);
            stan::math::initialize(Rt, DUMMY_VAR__);
            stan::math::fill(Rt, DUMMY_VAR__);
            current_statement_begin__ = 189;
            validate_non_negative_index("deriv1_spl_par_rt", "(N_spl_par_rt - 1)", (N_spl_par_rt - 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> deriv1_spl_par_rt((N_spl_par_rt - 1));
            stan::math::initialize(deriv1_spl_par_rt, DUMMY_VAR__);
            stan::math::fill(deriv1_spl_par_rt, DUMMY_VAR__);
            current_statement_begin__ = 190;
            validate_non_negative_index("deriv2_spl_par_rt", "(N_spl_par_rt - 2)", (N_spl_par_rt - 2));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> deriv2_spl_par_rt((N_spl_par_rt - 2));
            stan::math::initialize(deriv2_spl_par_rt, DUMMY_VAR__);
            stan::math::fill(deriv2_spl_par_rt, DUMMY_VAR__);
            current_statement_begin__ = 194;
            validate_non_negative_index("rr_diag_sym_vs_sev", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> rr_diag_sym_vs_sev(N_days_tot);
            stan::math::initialize(rr_diag_sym_vs_sev, DUMMY_VAR__);
            stan::math::fill(rr_diag_sym_vs_sev, DUMMY_VAR__);
            current_statement_begin__ = 195;
            validate_non_negative_index("p_diag_if_asy", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p_diag_if_asy(N_days_tot);
            stan::math::initialize(p_diag_if_asy, DUMMY_VAR__);
            stan::math::fill(p_diag_if_asy, DUMMY_VAR__);
            current_statement_begin__ = 196;
            validate_non_negative_index("p_diag_if_sym", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p_diag_if_sym(N_days_tot);
            stan::math::initialize(p_diag_if_sym, DUMMY_VAR__);
            stan::math::fill(p_diag_if_sym, DUMMY_VAR__);
            current_statement_begin__ = 200;
            validate_non_negative_index("sym_diag_delay", "Max_delay", Max_delay);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sym_diag_delay(Max_delay);
            stan::math::initialize(sym_diag_delay, DUMMY_VAR__);
            stan::math::fill(sym_diag_delay, DUMMY_VAR__);
            current_statement_begin__ = 201;
            validate_non_negative_index("sev_diag_delay", "Max_delay", Max_delay);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sev_diag_delay(Max_delay);
            stan::math::initialize(sev_diag_delay, DUMMY_VAR__);
            stan::math::fill(sev_diag_delay, DUMMY_VAR__);
            current_statement_begin__ = 205;
            local_scalar_t__ p_die_if_inf;
            (void) p_die_if_inf;  // dummy to suppress unused var warning
            stan::math::initialize(p_die_if_inf, DUMMY_VAR__);
            stan::math::fill(p_die_if_inf, DUMMY_VAR__);
            current_statement_begin__ = 207;
            validate_non_negative_index("new_sym", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> new_sym(N_days_tot);
            stan::math::initialize(new_sym, DUMMY_VAR__);
            stan::math::fill(new_sym, DUMMY_VAR__);
            current_statement_begin__ = 208;
            validate_non_negative_index("new_sev", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> new_sev(N_days_tot);
            stan::math::initialize(new_sev, DUMMY_VAR__);
            stan::math::fill(new_sev, DUMMY_VAR__);
            current_statement_begin__ = 209;
            validate_non_negative_index("new_die", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> new_die(N_days_tot);
            stan::math::initialize(new_die, DUMMY_VAR__);
            stan::math::fill(new_die, DUMMY_VAR__);
            current_statement_begin__ = 211;
            validate_non_negative_index("new_asy_dx", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> new_asy_dx(N_days_tot);
            stan::math::initialize(new_asy_dx, DUMMY_VAR__);
            stan::math::fill(new_asy_dx, DUMMY_VAR__);
            current_statement_begin__ = 212;
            validate_non_negative_index("new_sym_dx", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> new_sym_dx(N_days_tot);
            stan::math::initialize(new_sym_dx, DUMMY_VAR__);
            stan::math::fill(new_sym_dx, DUMMY_VAR__);
            current_statement_begin__ = 213;
            validate_non_negative_index("new_sev_dx", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> new_sev_dx(N_days_tot);
            stan::math::initialize(new_sev_dx, DUMMY_VAR__);
            stan::math::fill(new_sev_dx, DUMMY_VAR__);
            current_statement_begin__ = 215;
            validate_non_negative_index("dx_sym_sev", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> dx_sym_sev(N_days_tot);
            stan::math::initialize(dx_sym_sev, DUMMY_VAR__);
            stan::math::fill(dx_sym_sev, DUMMY_VAR__);
            current_statement_begin__ = 216;
            validate_non_negative_index("dx_sym_die", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> dx_sym_die(N_days_tot);
            stan::math::initialize(dx_sym_die, DUMMY_VAR__);
            stan::math::fill(dx_sym_die, DUMMY_VAR__);
            current_statement_begin__ = 217;
            validate_non_negative_index("dx_sev_die", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> dx_sev_die(N_days_tot);
            stan::math::initialize(dx_sev_die, DUMMY_VAR__);
            stan::math::fill(dx_sev_die, DUMMY_VAR__);
            current_statement_begin__ = 219;
            validate_non_negative_index("diag_all", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> diag_all(N_days_tot);
            stan::math::initialize(diag_all, DUMMY_VAR__);
            stan::math::fill(diag_all, DUMMY_VAR__);
            current_statement_begin__ = 220;
            validate_non_negative_index("new_die_dx", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> new_die_dx(N_days_tot);
            stan::math::initialize(new_die_dx, DUMMY_VAR__);
            stan::math::fill(new_die_dx, DUMMY_VAR__);
            current_statement_begin__ = 223;
            validate_non_negative_index("occur_cas", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> occur_cas(N_days_tot);
            stan::math::initialize(occur_cas, DUMMY_VAR__);
            stan::math::fill(occur_cas, DUMMY_VAR__);
            current_statement_begin__ = 224;
            validate_non_negative_index("occur_die", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> occur_die(N_days_tot);
            stan::math::initialize(occur_die, DUMMY_VAR__);
            stan::math::fill(occur_die, DUMMY_VAR__);
            current_statement_begin__ = 228;
            local_scalar_t__ phi_cas;
            (void) phi_cas;  // dummy to suppress unused var warning
            stan::math::initialize(phi_cas, DUMMY_VAR__);
            stan::math::fill(phi_cas, DUMMY_VAR__);
            current_statement_begin__ = 229;
            local_scalar_t__ phi_die;
            (void) phi_die;  // dummy to suppress unused var warning
            stan::math::initialize(phi_die, DUMMY_VAR__);
            stan::math::fill(phi_die, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 233;
            stan::math::assign(rr_diag_sym_vs_sev, inv_logit(multiply(spl_basis_dx, spl_par_sym_dx)));
            current_statement_begin__ = 235;
            stan::math::assign(p_diag_if_sym, multiply(p_diag_if_sev, rr_diag_sym_vs_sev));
            current_statement_begin__ = 236;
            stan::math::assign(p_diag_if_asy, multiply(p_diag_if_sym, rr_diag_asy_vs_sym));
            current_statement_begin__ = 244;
            for (int i = 1; i <= Max_delay; ++i) {
                current_statement_begin__ = 245;
                stan::model::assign(sym_diag_delay, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (gamma_cdf((i + 0.0), sym_prg_delay_shap, (sym_prg_delay_rate / scale_dx_delay_sym)) - gamma_cdf((i - 1.0), sym_prg_delay_shap, (sym_prg_delay_rate / scale_dx_delay_sym))), 
                            "assigning variable sym_diag_delay");
                current_statement_begin__ = 249;
                stan::model::assign(sev_diag_delay, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (gamma_cdf((i + 0.0), sev_prg_delay_shap, (sev_prg_delay_rate / scale_dx_delay_sev)) - gamma_cdf((i - 1.0), sev_prg_delay_shap, (sev_prg_delay_rate / scale_dx_delay_sev))), 
                            "assigning variable sev_diag_delay");
            }
            current_statement_begin__ = 259;
            stan::math::assign(p_die_if_inf, ((p_sym_if_inf * p_sev_if_sym) * p_die_if_sev));
            current_statement_begin__ = 266;
            stan::math::assign(logRt, multiply(spl_basis_rt, spl_par_rt));
            current_statement_begin__ = 267;
            stan::math::assign(Rt, stan::math::exp(logRt));
            current_statement_begin__ = 268;
            stan::math::assign(deriv1_log_new_inf, divide(logRt, serial_i));
            current_statement_begin__ = 270;
            stan::math::assign(log_new_inf, cumulative_sum(deriv1_log_new_inf));
            current_statement_begin__ = 271;
            stan::math::assign(log_new_inf, add(subtract(log_new_inf, get_base1(log_new_inf, N_days_before, "log_new_inf", 1)), log_new_inf_0));
            current_statement_begin__ = 272;
            stan::math::assign(new_inf, add(stan::math::exp(log_new_inf), inf_imported));
            current_statement_begin__ = 275;
            for (int i = 1; i <= (N_spl_par_rt - 2); ++i) {
                current_statement_begin__ = 276;
                stan::model::assign(deriv2_spl_par_rt, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (((get_base1(spl_par_rt, (i + 1), "spl_par_rt", 1) * 2) - get_base1(spl_par_rt, i, "spl_par_rt", 1)) - get_base1(spl_par_rt, (i + 2), "spl_par_rt", 1)), 
                            "assigning variable deriv2_spl_par_rt");
            }
            current_statement_begin__ = 279;
            for (int i = 1; i <= (N_spl_par_rt - 1); ++i) {
                current_statement_begin__ = 280;
                stan::model::assign(deriv1_spl_par_rt, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(spl_par_rt, (i + 1), "spl_par_rt", 1) - get_base1(spl_par_rt, i, "spl_par_rt", 1)), 
                            "assigning variable deriv1_spl_par_rt");
            }
            current_statement_begin__ = 289;
            stan::math::assign(new_sym, rep_vector(0, N_days_tot));
            current_statement_begin__ = 290;
            stan::math::assign(new_sev, rep_vector(0, N_days_tot));
            current_statement_begin__ = 291;
            stan::math::assign(new_die, rep_vector(0, N_days_tot));
            current_statement_begin__ = 293;
            for (int i = 1; i <= N_days_tot; ++i) {
                current_statement_begin__ = 294;
                for (int j = 1; j <= Max_delay; ++j) {
                    current_statement_begin__ = 295;
                    if (as_bool(logical_lte((i + (j - 1)), N_days_tot))) {
                        current_statement_begin__ = 296;
                        stan::model::assign(new_sym, 
                                    stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), 
                                    (stan::model::rvalue(new_sym, stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), "new_sym") + ((get_base1(new_inf, i, "new_inf", 1) * p_sym_if_inf) * get_base1(inf_prg_delay, j, "inf_prg_delay", 1))), 
                                    "assigning variable new_sym");
                    }
                }
            }
            current_statement_begin__ = 301;
            for (int i = 1; i <= N_days_tot; ++i) {
                current_statement_begin__ = 302;
                for (int j = 1; j <= Max_delay; ++j) {
                    current_statement_begin__ = 303;
                    if (as_bool(logical_lte((i + (j - 1)), N_days_tot))) {
                        current_statement_begin__ = 304;
                        stan::model::assign(new_sev, 
                                    stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), 
                                    (stan::model::rvalue(new_sev, stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), "new_sev") + ((get_base1(new_sym, i, "new_sym", 1) * p_sev_if_sym) * get_base1(sym_prg_delay, j, "sym_prg_delay", 1))), 
                                    "assigning variable new_sev");
                    }
                }
            }
            current_statement_begin__ = 309;
            for (int i = 1; i <= N_days_tot; ++i) {
                current_statement_begin__ = 310;
                for (int j = 1; j <= Max_delay; ++j) {
                    current_statement_begin__ = 311;
                    if (as_bool(logical_lte((i + (j - 1)), N_days_tot))) {
                        current_statement_begin__ = 312;
                        stan::model::assign(new_die, 
                                    stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), 
                                    (stan::model::rvalue(new_die, stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), "new_die") + ((get_base1(new_sev, i, "new_sev", 1) * p_die_if_sev) * get_base1(sev_prg_delay, j, "sev_prg_delay", 1))), 
                                    "assigning variable new_die");
                    }
                }
            }
            current_statement_begin__ = 320;
            stan::math::assign(new_asy_dx, rep_vector(0, N_days_tot));
            current_statement_begin__ = 322;
            stan::math::assign(new_sym_dx, rep_vector(0, N_days_tot));
            current_statement_begin__ = 323;
            stan::math::assign(dx_sym_sev, rep_vector(0, N_days_tot));
            current_statement_begin__ = 324;
            stan::math::assign(dx_sym_die, rep_vector(0, N_days_tot));
            current_statement_begin__ = 326;
            stan::math::assign(new_sev_dx, rep_vector(0, N_days_tot));
            current_statement_begin__ = 327;
            stan::math::assign(dx_sev_die, rep_vector(0, N_days_tot));
            current_statement_begin__ = 329;
            stan::math::assign(diag_all, rep_vector(0, N_days_tot));
            current_statement_begin__ = 330;
            stan::math::assign(new_die_dx, rep_vector(0, N_days_tot));
            current_statement_begin__ = 339;
            for (int i = 1; i <= N_days_tot; ++i) {
                current_statement_begin__ = 340;
                for (int j = 1; j <= Max_delay; ++j) {
                    current_statement_begin__ = 341;
                    if (as_bool(logical_lte((i + (j - 1)), N_days_tot))) {
                        current_statement_begin__ = 342;
                        stan::model::assign(new_asy_dx, 
                                    stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), 
                                    (stan::model::rvalue(new_asy_dx, stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), "new_asy_dx") + ((((get_base1(new_inf, i, "new_inf", 1) * (1 - p_sym_if_inf)) * (1 - (get_base1(is_weekend, (i + (j - 1)), "is_weekend", 1) * weekend_eff))) * get_base1(p_diag_if_asy, i, "p_diag_if_asy", 1)) * get_base1(asy_rec_delay, j, "asy_rec_delay", 1))), 
                                    "assigning variable new_asy_dx");
                    }
                }
            }
            current_statement_begin__ = 353;
            for (int i = 1; i <= N_days_tot; ++i) {
                current_statement_begin__ = 354;
                for (int j = 1; j <= Max_delay; ++j) {
                    current_statement_begin__ = 355;
                    if (as_bool(logical_lte((i + (j - 1)), N_days_tot))) {
                        current_statement_begin__ = 356;
                        stan::model::assign(new_sym_dx, 
                                    stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), 
                                    (stan::model::rvalue(new_sym_dx, stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), "new_sym_dx") + (((get_base1(new_sym, i, "new_sym", 1) * get_base1(p_diag_if_sym, i, "p_diag_if_sym", 1)) * (1 - (get_base1(is_weekend, (i + (j - 1)), "is_weekend", 1) * weekend_eff))) * get_base1(sym_diag_delay, j, "sym_diag_delay", 1))), 
                                    "assigning variable new_sym_dx");
                    }
                }
            }
            current_statement_begin__ = 366;
            for (int i = 1; i <= N_days_tot; ++i) {
                current_statement_begin__ = 367;
                for (int j = 1; j <= Max_delay; ++j) {
                    current_statement_begin__ = 368;
                    if (as_bool(logical_lte((i + (j - 1)), N_days_tot))) {
                        current_statement_begin__ = 369;
                        stan::model::assign(dx_sym_sev, 
                                    stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), 
                                    (stan::model::rvalue(dx_sym_sev, stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), "dx_sym_sev") + (((get_base1(new_sym, i, "new_sym", 1) * get_base1(p_diag_if_sym, i, "p_diag_if_sym", 1)) * p_sev_if_sym) * get_base1(sym_prg_delay, j, "sym_prg_delay", 1))), 
                                    "assigning variable dx_sym_sev");
                    }
                }
            }
            current_statement_begin__ = 375;
            for (int i = 1; i <= N_days_tot; ++i) {
                current_statement_begin__ = 376;
                for (int j = 1; j <= Max_delay; ++j) {
                    current_statement_begin__ = 377;
                    if (as_bool(logical_lte((i + (j - 1)), N_days_tot))) {
                        current_statement_begin__ = 378;
                        stan::model::assign(dx_sym_die, 
                                    stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), 
                                    (stan::model::rvalue(dx_sym_die, stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), "dx_sym_die") + ((get_base1(dx_sym_sev, i, "dx_sym_sev", 1) * p_die_if_sev) * get_base1(sev_prg_delay, j, "sev_prg_delay", 1))), 
                                    "assigning variable dx_sym_die");
                    }
                }
            }
            current_statement_begin__ = 386;
            for (int i = 1; i <= N_days_tot; ++i) {
                current_statement_begin__ = 387;
                for (int j = 1; j <= Max_delay; ++j) {
                    current_statement_begin__ = 388;
                    if (as_bool(logical_lte((i + (j - 1)), N_days_tot))) {
                        current_statement_begin__ = 389;
                        stan::model::assign(new_sev_dx, 
                                    stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), 
                                    (stan::model::rvalue(new_sev_dx, stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), "new_sev_dx") + ((((get_base1(new_sev, i, "new_sev", 1) - get_base1(dx_sym_sev, i, "dx_sym_sev", 1)) * p_diag_if_sev) * (1 - (get_base1(is_weekend, (i + (j - 1)), "is_weekend", 1) * weekend_eff))) * get_base1(sev_diag_delay, j, "sev_diag_delay", 1))), 
                                    "assigning variable new_sev_dx");
                    }
                }
            }
            current_statement_begin__ = 398;
            for (int i = 1; i <= N_days_tot; ++i) {
                current_statement_begin__ = 399;
                for (int j = 1; j <= Max_delay; ++j) {
                    current_statement_begin__ = 400;
                    if (as_bool(logical_lte((i + (j - 1)), N_days_tot))) {
                        current_statement_begin__ = 401;
                        stan::model::assign(dx_sev_die, 
                                    stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), 
                                    (stan::model::rvalue(dx_sev_die, stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), "dx_sev_die") + ((((get_base1(new_sev, i, "new_sev", 1) - get_base1(dx_sym_sev, i, "dx_sym_sev", 1)) * p_diag_if_sev) * p_die_if_sev) * get_base1(sev_prg_delay, j, "sev_prg_delay", 1))), 
                                    "assigning variable dx_sev_die");
                    }
                }
            }
            current_statement_begin__ = 408;
            stan::math::assign(diag_all, add(add(new_asy_dx, new_sym_dx), new_sev_dx));
            current_statement_begin__ = 409;
            stan::math::assign(new_die_dx, add(dx_sym_die, dx_sev_die));
            current_statement_begin__ = 416;
            stan::math::assign(occur_cas, rep_vector(0, N_days_tot));
            current_statement_begin__ = 417;
            stan::math::assign(occur_die, rep_vector(0, N_days_tot));
            current_statement_begin__ = 421;
            if (as_bool(logical_eq(obs_cas_rep, 1))) {
                current_statement_begin__ = 423;
                for (int i = 1; i <= N_days_tot; ++i) {
                    current_statement_begin__ = 424;
                    for (int j = 1; j <= Max_delay; ++j) {
                        current_statement_begin__ = 425;
                        if (as_bool(logical_lte((i + (j - 1)), N_days_tot))) {
                            current_statement_begin__ = 428;
                            stan::model::assign(occur_cas, 
                                        stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), 
                                        (stan::model::rvalue(occur_cas, stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), "occur_cas") + (get_base1(diag_all, i, "diag_all", 1) * get_base1(cas_rep_delay, j, "cas_rep_delay", 1))), 
                                        "assigning variable occur_cas");
                        }
                    }
                }
            } else {
                current_statement_begin__ = 436;
                for (int i = 1; i <= (N_days_tot - Max_delay); ++i) {
                    current_statement_begin__ = 437;
                    stan::model::assign(occur_cas, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                get_base1(diag_all, i, "diag_all", 1), 
                                "assigning variable occur_cas");
                }
                current_statement_begin__ = 445;
                for (int i = ((N_days_tot - Max_delay) + 1); i <= N_days_tot; ++i) {
                    current_statement_begin__ = 446;
                    stan::model::assign(occur_cas, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (stan::model::rvalue(occur_cas, stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), "occur_cas") + (get_base1(diag_all, i, "diag_all", 1) * get_base1(cas_cum_report_delay, ((N_days_tot - i) + 1), "cas_cum_report_delay", 1))), 
                                "assigning variable occur_cas");
                }
            }
            current_statement_begin__ = 450;
            if (as_bool(logical_eq(obs_die_rep, 1))) {
                current_statement_begin__ = 451;
                for (int i = 1; i <= N_days_tot; ++i) {
                    current_statement_begin__ = 452;
                    for (int j = 1; j <= Max_delay; ++j) {
                        current_statement_begin__ = 453;
                        if (as_bool(logical_lte((i + (j - 1)), N_days_tot))) {
                            current_statement_begin__ = 454;
                            stan::model::assign(occur_die, 
                                        stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), 
                                        (stan::model::rvalue(occur_die, stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), "occur_die") + (get_base1(new_die_dx, i, "new_die_dx", 1) * get_base1(die_rep_delay, j, "die_rep_delay", 1))), 
                                        "assigning variable occur_die");
                        }
                    }
                }
            } else {
                current_statement_begin__ = 459;
                for (int i = 1; i <= (N_days_tot - Max_delay); ++i) {
                    current_statement_begin__ = 460;
                    stan::model::assign(occur_die, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                get_base1(new_die_dx, i, "new_die_dx", 1), 
                                "assigning variable occur_die");
                }
                current_statement_begin__ = 462;
                for (int i = ((N_days_tot - Max_delay) + 1); i <= N_days_tot; ++i) {
                    current_statement_begin__ = 463;
                    stan::model::assign(occur_die, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (stan::model::rvalue(occur_die, stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), "occur_die") + (get_base1(new_die_dx, i, "new_die_dx", 1) * get_base1(die_cum_report_delay, ((N_days_tot - i) + 1), "die_cum_report_delay", 1))), 
                                "assigning variable occur_die");
                }
            }
            current_statement_begin__ = 468;
            stan::math::assign(phi_cas, pow(inv_sqrt_phi_c, -(2)));
            current_statement_begin__ = 469;
            stan::math::assign(phi_die, pow(inv_sqrt_phi_d, -(2)));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 182;
            size_t log_new_inf_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_new_inf_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(log_new_inf(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: log_new_inf" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_new_inf: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 183;
            size_t new_inf_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < new_inf_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(new_inf(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: new_inf" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable new_inf: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 184;
            size_t deriv1_log_new_inf_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < deriv1_log_new_inf_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(deriv1_log_new_inf(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: deriv1_log_new_inf" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable deriv1_log_new_inf: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 187;
            size_t logRt_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < logRt_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(logRt(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: logRt" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable logRt: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 188;
            size_t Rt_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < Rt_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(Rt(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: Rt" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Rt: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 189;
            size_t deriv1_spl_par_rt_j_1_max__ = (N_spl_par_rt - 1);
            for (size_t j_1__ = 0; j_1__ < deriv1_spl_par_rt_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(deriv1_spl_par_rt(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: deriv1_spl_par_rt" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable deriv1_spl_par_rt: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 190;
            size_t deriv2_spl_par_rt_j_1_max__ = (N_spl_par_rt - 2);
            for (size_t j_1__ = 0; j_1__ < deriv2_spl_par_rt_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(deriv2_spl_par_rt(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: deriv2_spl_par_rt" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable deriv2_spl_par_rt: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 194;
            size_t rr_diag_sym_vs_sev_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < rr_diag_sym_vs_sev_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(rr_diag_sym_vs_sev(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: rr_diag_sym_vs_sev" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable rr_diag_sym_vs_sev: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 195;
            size_t p_diag_if_asy_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < p_diag_if_asy_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(p_diag_if_asy(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: p_diag_if_asy" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable p_diag_if_asy: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 196;
            size_t p_diag_if_sym_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < p_diag_if_sym_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(p_diag_if_sym(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: p_diag_if_sym" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable p_diag_if_sym: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 200;
            size_t sym_diag_delay_j_1_max__ = Max_delay;
            for (size_t j_1__ = 0; j_1__ < sym_diag_delay_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(sym_diag_delay(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: sym_diag_delay" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sym_diag_delay: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 201;
            size_t sev_diag_delay_j_1_max__ = Max_delay;
            for (size_t j_1__ = 0; j_1__ < sev_diag_delay_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(sev_diag_delay(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: sev_diag_delay" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sev_diag_delay: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 205;
            if (stan::math::is_uninitialized(p_die_if_inf)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: p_die_if_inf";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable p_die_if_inf: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 207;
            size_t new_sym_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < new_sym_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(new_sym(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: new_sym" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable new_sym: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 208;
            size_t new_sev_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < new_sev_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(new_sev(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: new_sev" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable new_sev: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 209;
            size_t new_die_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < new_die_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(new_die(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: new_die" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable new_die: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 211;
            size_t new_asy_dx_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < new_asy_dx_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(new_asy_dx(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: new_asy_dx" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable new_asy_dx: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 212;
            size_t new_sym_dx_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < new_sym_dx_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(new_sym_dx(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: new_sym_dx" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable new_sym_dx: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 213;
            size_t new_sev_dx_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < new_sev_dx_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(new_sev_dx(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: new_sev_dx" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable new_sev_dx: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 215;
            size_t dx_sym_sev_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < dx_sym_sev_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(dx_sym_sev(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: dx_sym_sev" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable dx_sym_sev: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 216;
            size_t dx_sym_die_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < dx_sym_die_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(dx_sym_die(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: dx_sym_die" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable dx_sym_die: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 217;
            size_t dx_sev_die_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < dx_sev_die_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(dx_sev_die(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: dx_sev_die" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable dx_sev_die: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 219;
            size_t diag_all_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < diag_all_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(diag_all(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: diag_all" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable diag_all: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 220;
            size_t new_die_dx_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < new_die_dx_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(new_die_dx(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: new_die_dx" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable new_die_dx: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 223;
            size_t occur_cas_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < occur_cas_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(occur_cas(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: occur_cas" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable occur_cas: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 224;
            size_t occur_die_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < occur_die_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(occur_die(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: occur_die" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable occur_die: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 228;
            if (stan::math::is_uninitialized(phi_cas)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: phi_cas";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable phi_cas: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 229;
            if (stan::math::is_uninitialized(phi_die)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: phi_die";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable phi_die: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            // model body
            {
            current_statement_begin__ = 475;
            int tmp_obs_cas(0);
            (void) tmp_obs_cas;  // dummy to suppress unused var warning
            stan::math::fill(tmp_obs_cas, std::numeric_limits<int>::min());
            current_statement_begin__ = 476;
            local_scalar_t__ tmp_occur_cas(DUMMY_VAR__);
            (void) tmp_occur_cas;  // dummy to suppress unused var warning
            stan::math::initialize(tmp_occur_cas, DUMMY_VAR__);
            stan::math::fill(tmp_occur_cas, DUMMY_VAR__);
            current_statement_begin__ = 477;
            int tmp_obs_die(0);
            (void) tmp_obs_die;  // dummy to suppress unused var warning
            stan::math::fill(tmp_obs_die, std::numeric_limits<int>::min());
            current_statement_begin__ = 478;
            local_scalar_t__ tmp_occur_die(DUMMY_VAR__);
            (void) tmp_occur_die;  // dummy to suppress unused var warning
            stan::math::initialize(tmp_occur_die, DUMMY_VAR__);
            stan::math::fill(tmp_occur_die, DUMMY_VAR__);
            current_statement_begin__ = 480;
            lp_accum__.add(normal_log<propto__>(log_new_inf_0, pri_log_new_inf_0_mu, pri_log_new_inf_0_sd));
            current_statement_begin__ = 481;
            lp_accum__.add(normal_log<propto__>(spl_par_rt, pri_logRt_mu, pri_logRt_sd));
            current_statement_begin__ = 482;
            lp_accum__.add(gamma_log<propto__>(serial_i, pri_serial_i_shap, pri_serial_i_rate));
            current_statement_begin__ = 483;
            lp_accum__.add(normal_log<propto__>(deriv1_spl_par_rt, 0, pri_deriv1_spl_par_sd));
            current_statement_begin__ = 484;
            lp_accum__.add(normal_log<propto__>(deriv2_spl_par_rt, 0, pri_deriv2_spl_par_sd));
            current_statement_begin__ = 485;
            lp_accum__.add(normal_log<propto__>(inf_imported, pri_inf_imported_mu, pri_inf_imported_sd));
            current_statement_begin__ = 489;
            lp_accum__.add(beta_log<propto__>(p_sym_if_inf, pri_p_sym_if_inf_a, pri_p_sym_if_inf_b));
            current_statement_begin__ = 490;
            lp_accum__.add(beta_log<propto__>(p_sev_if_sym, pri_p_sev_if_sym_a, pri_p_sev_if_sym_b));
            current_statement_begin__ = 491;
            lp_accum__.add(beta_log<propto__>(p_die_if_sev, pri_p_die_if_sev_a, pri_p_die_if_sev_b));
            current_statement_begin__ = 493;
            lp_accum__.add(beta_log<propto__>(p_die_if_inf, pri_p_die_if_inf_a, pri_p_die_if_inf_b));
            current_statement_begin__ = 497;
            lp_accum__.add(beta_log<propto__>(rr_diag_asy_vs_sym, pri_rr_diag_asy_vs_sym_a, pri_rr_diag_asy_vs_sym_b));
            current_statement_begin__ = 498;
            lp_accum__.add(beta_log<propto__>(inv_logit(spl_par_sym_dx), pri_rr_diag_sym_vs_sev_a, pri_rr_diag_sym_vs_sev_b));
            current_statement_begin__ = 499;
            lp_accum__.add(beta_log<propto__>(p_diag_if_sev, pri_p_diag_if_sev_a, pri_p_diag_if_sev_b));
            current_statement_begin__ = 500;
            lp_accum__.add(beta_log<propto__>(weekend_eff, pri_weekend_eff_a, pri_weekend_eff_b));
            current_statement_begin__ = 502;
            lp_accum__.add(beta_log<propto__>(scale_dx_delay_sym, scale_dx_delay_sym_a, scale_dx_delay_sym_b));
            current_statement_begin__ = 503;
            lp_accum__.add(beta_log<propto__>(scale_dx_delay_sev, scale_dx_delay_sev_a, scale_dx_delay_sev_b));
            current_statement_begin__ = 506;
            lp_accum__.add(normal_log<propto__>(inv_sqrt_phi_c, 0, 1));
            current_statement_begin__ = 507;
            lp_accum__.add(normal_log<propto__>(inv_sqrt_phi_d, 0, 1));
            current_statement_begin__ = 510;
            if (as_bool(logical_eq(cas_yes, 1))) {
                current_statement_begin__ = 511;
                stan::math::assign(tmp_obs_cas, get_base1(obs_cas, 1, "obs_cas", 1));
                current_statement_begin__ = 512;
                stan::math::assign(tmp_occur_cas, get_base1(occur_cas, (1 + N_days_before), "occur_cas", 1));
                current_statement_begin__ = 513;
                for (int i = 1; i <= N_days; ++i) {
                    current_statement_begin__ = 514;
                    lp_accum__.add((neg_binomial_2_log(tmp_obs_cas, tmp_occur_cas, phi_cas) / N_days_av));
                    current_statement_begin__ = 515;
                    if (as_bool(logical_gt(i, nda0))) {
                        current_statement_begin__ = 516;
                        stan::math::assign(tmp_obs_cas, (tmp_obs_cas - get_base1(obs_cas, (i - nda0), "obs_cas", 1)));
                        current_statement_begin__ = 517;
                        stan::math::assign(tmp_occur_cas, (tmp_occur_cas - get_base1(occur_cas, ((i + N_days_before) - nda0), "occur_cas", 1)));
                    }
                    current_statement_begin__ = 519;
                    if (as_bool(logical_lt(i, N_days))) {
                        current_statement_begin__ = 520;
                        stan::math::assign(tmp_obs_cas, (tmp_obs_cas + get_base1(obs_cas, (i + 1), "obs_cas", 1)));
                        current_statement_begin__ = 521;
                        stan::math::assign(tmp_occur_cas, (tmp_occur_cas + get_base1(occur_cas, ((i + N_days_before) + 1), "occur_cas", 1)));
                    }
                }
            }
            current_statement_begin__ = 525;
            if (as_bool(logical_eq(die_yes, 1))) {
                current_statement_begin__ = 526;
                stan::math::assign(tmp_obs_die, get_base1(obs_die, 1, "obs_die", 1));
                current_statement_begin__ = 527;
                stan::math::assign(tmp_occur_die, get_base1(occur_die, (1 + N_days_before), "occur_die", 1));
                current_statement_begin__ = 528;
                for (int i = 1; i <= N_days; ++i) {
                    current_statement_begin__ = 529;
                    lp_accum__.add((neg_binomial_2_log(tmp_obs_die, tmp_occur_die, phi_die) / N_days_av));
                    current_statement_begin__ = 530;
                    if (as_bool(logical_gt(i, nda0))) {
                        current_statement_begin__ = 531;
                        stan::math::assign(tmp_obs_die, (tmp_obs_die - get_base1(obs_die, (i - nda0), "obs_die", 1)));
                        current_statement_begin__ = 532;
                        stan::math::assign(tmp_occur_die, (tmp_occur_die - get_base1(occur_die, ((i + N_days_before) - nda0), "occur_die", 1)));
                    }
                    current_statement_begin__ = 534;
                    if (as_bool(logical_lt(i, N_days))) {
                        current_statement_begin__ = 535;
                        stan::math::assign(tmp_obs_die, (tmp_obs_die + get_base1(obs_die, (i + 1), "obs_die", 1)));
                        current_statement_begin__ = 536;
                        stan::math::assign(tmp_occur_die, (tmp_occur_die + get_base1(occur_die, ((i + N_days_before) + 1), "occur_die", 1)));
                    }
                }
            }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("log_new_inf_0");
        names__.push_back("serial_i");
        names__.push_back("spl_par_rt");
        names__.push_back("inf_imported");
        names__.push_back("p_sym_if_inf");
        names__.push_back("p_sev_if_sym");
        names__.push_back("p_die_if_sev");
        names__.push_back("scale_dx_delay_asy");
        names__.push_back("scale_dx_delay_sym");
        names__.push_back("scale_dx_delay_sev");
        names__.push_back("rr_diag_asy_vs_sym");
        names__.push_back("p_diag_if_sev");
        names__.push_back("spl_par_sym_dx");
        names__.push_back("weekend_eff");
        names__.push_back("inv_sqrt_phi_c");
        names__.push_back("inv_sqrt_phi_d");
        names__.push_back("log_new_inf");
        names__.push_back("new_inf");
        names__.push_back("deriv1_log_new_inf");
        names__.push_back("logRt");
        names__.push_back("Rt");
        names__.push_back("deriv1_spl_par_rt");
        names__.push_back("deriv2_spl_par_rt");
        names__.push_back("rr_diag_sym_vs_sev");
        names__.push_back("p_diag_if_asy");
        names__.push_back("p_diag_if_sym");
        names__.push_back("sym_diag_delay");
        names__.push_back("sev_diag_delay");
        names__.push_back("p_die_if_inf");
        names__.push_back("new_sym");
        names__.push_back("new_sev");
        names__.push_back("new_die");
        names__.push_back("new_asy_dx");
        names__.push_back("new_sym_dx");
        names__.push_back("new_sev_dx");
        names__.push_back("dx_sym_sev");
        names__.push_back("dx_sym_die");
        names__.push_back("dx_sev_die");
        names__.push_back("diag_all");
        names__.push_back("new_die_dx");
        names__.push_back("occur_cas");
        names__.push_back("occur_die");
        names__.push_back("phi_cas");
        names__.push_back("phi_die");
        names__.push_back("p_die_if_sym");
        names__.push_back("diag_cases");
        names__.push_back("cumulative_incidence");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_spl_par_rt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_spl_par_dx);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((N_spl_par_rt - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((N_spl_par_rt - 2));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Max_delay);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Max_delay);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_stan_program_default_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double log_new_inf_0 = in__.scalar_constrain();
        vars__.push_back(log_new_inf_0);
        double serial_i = in__.scalar_lb_constrain(0);
        vars__.push_back(serial_i);
        Eigen::Matrix<double, Eigen::Dynamic, 1> spl_par_rt = in__.vector_constrain(N_spl_par_rt);
        size_t spl_par_rt_j_1_max__ = N_spl_par_rt;
        for (size_t j_1__ = 0; j_1__ < spl_par_rt_j_1_max__; ++j_1__) {
            vars__.push_back(spl_par_rt(j_1__));
        }
        double inf_imported = in__.scalar_lb_constrain(0);
        vars__.push_back(inf_imported);
        double p_sym_if_inf = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(p_sym_if_inf);
        double p_sev_if_sym = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(p_sev_if_sym);
        double p_die_if_sev = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(p_die_if_sev);
        double scale_dx_delay_asy = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(scale_dx_delay_asy);
        double scale_dx_delay_sym = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(scale_dx_delay_sym);
        double scale_dx_delay_sev = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(scale_dx_delay_sev);
        double rr_diag_asy_vs_sym = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(rr_diag_asy_vs_sym);
        double p_diag_if_sev = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(p_diag_if_sev);
        Eigen::Matrix<double, Eigen::Dynamic, 1> spl_par_sym_dx = in__.vector_constrain(N_spl_par_dx);
        size_t spl_par_sym_dx_j_1_max__ = N_spl_par_dx;
        for (size_t j_1__ = 0; j_1__ < spl_par_sym_dx_j_1_max__; ++j_1__) {
            vars__.push_back(spl_par_sym_dx(j_1__));
        }
        double weekend_eff = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(weekend_eff);
        double inv_sqrt_phi_c = in__.scalar_lb_constrain(0);
        vars__.push_back(inv_sqrt_phi_c);
        double inv_sqrt_phi_d = in__.scalar_lb_constrain(0);
        vars__.push_back(inv_sqrt_phi_d);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 182;
            validate_non_negative_index("log_new_inf", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_new_inf(N_days_tot);
            stan::math::initialize(log_new_inf, DUMMY_VAR__);
            stan::math::fill(log_new_inf, DUMMY_VAR__);
            current_statement_begin__ = 183;
            validate_non_negative_index("new_inf", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> new_inf(N_days_tot);
            stan::math::initialize(new_inf, DUMMY_VAR__);
            stan::math::fill(new_inf, DUMMY_VAR__);
            current_statement_begin__ = 184;
            validate_non_negative_index("deriv1_log_new_inf", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> deriv1_log_new_inf(N_days_tot);
            stan::math::initialize(deriv1_log_new_inf, DUMMY_VAR__);
            stan::math::fill(deriv1_log_new_inf, DUMMY_VAR__);
            current_statement_begin__ = 187;
            validate_non_negative_index("logRt", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> logRt(N_days_tot);
            stan::math::initialize(logRt, DUMMY_VAR__);
            stan::math::fill(logRt, DUMMY_VAR__);
            current_statement_begin__ = 188;
            validate_non_negative_index("Rt", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> Rt(N_days_tot);
            stan::math::initialize(Rt, DUMMY_VAR__);
            stan::math::fill(Rt, DUMMY_VAR__);
            current_statement_begin__ = 189;
            validate_non_negative_index("deriv1_spl_par_rt", "(N_spl_par_rt - 1)", (N_spl_par_rt - 1));
            Eigen::Matrix<double, Eigen::Dynamic, 1> deriv1_spl_par_rt((N_spl_par_rt - 1));
            stan::math::initialize(deriv1_spl_par_rt, DUMMY_VAR__);
            stan::math::fill(deriv1_spl_par_rt, DUMMY_VAR__);
            current_statement_begin__ = 190;
            validate_non_negative_index("deriv2_spl_par_rt", "(N_spl_par_rt - 2)", (N_spl_par_rt - 2));
            Eigen::Matrix<double, Eigen::Dynamic, 1> deriv2_spl_par_rt((N_spl_par_rt - 2));
            stan::math::initialize(deriv2_spl_par_rt, DUMMY_VAR__);
            stan::math::fill(deriv2_spl_par_rt, DUMMY_VAR__);
            current_statement_begin__ = 194;
            validate_non_negative_index("rr_diag_sym_vs_sev", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> rr_diag_sym_vs_sev(N_days_tot);
            stan::math::initialize(rr_diag_sym_vs_sev, DUMMY_VAR__);
            stan::math::fill(rr_diag_sym_vs_sev, DUMMY_VAR__);
            current_statement_begin__ = 195;
            validate_non_negative_index("p_diag_if_asy", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> p_diag_if_asy(N_days_tot);
            stan::math::initialize(p_diag_if_asy, DUMMY_VAR__);
            stan::math::fill(p_diag_if_asy, DUMMY_VAR__);
            current_statement_begin__ = 196;
            validate_non_negative_index("p_diag_if_sym", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> p_diag_if_sym(N_days_tot);
            stan::math::initialize(p_diag_if_sym, DUMMY_VAR__);
            stan::math::fill(p_diag_if_sym, DUMMY_VAR__);
            current_statement_begin__ = 200;
            validate_non_negative_index("sym_diag_delay", "Max_delay", Max_delay);
            Eigen::Matrix<double, Eigen::Dynamic, 1> sym_diag_delay(Max_delay);
            stan::math::initialize(sym_diag_delay, DUMMY_VAR__);
            stan::math::fill(sym_diag_delay, DUMMY_VAR__);
            current_statement_begin__ = 201;
            validate_non_negative_index("sev_diag_delay", "Max_delay", Max_delay);
            Eigen::Matrix<double, Eigen::Dynamic, 1> sev_diag_delay(Max_delay);
            stan::math::initialize(sev_diag_delay, DUMMY_VAR__);
            stan::math::fill(sev_diag_delay, DUMMY_VAR__);
            current_statement_begin__ = 205;
            double p_die_if_inf;
            (void) p_die_if_inf;  // dummy to suppress unused var warning
            stan::math::initialize(p_die_if_inf, DUMMY_VAR__);
            stan::math::fill(p_die_if_inf, DUMMY_VAR__);
            current_statement_begin__ = 207;
            validate_non_negative_index("new_sym", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> new_sym(N_days_tot);
            stan::math::initialize(new_sym, DUMMY_VAR__);
            stan::math::fill(new_sym, DUMMY_VAR__);
            current_statement_begin__ = 208;
            validate_non_negative_index("new_sev", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> new_sev(N_days_tot);
            stan::math::initialize(new_sev, DUMMY_VAR__);
            stan::math::fill(new_sev, DUMMY_VAR__);
            current_statement_begin__ = 209;
            validate_non_negative_index("new_die", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> new_die(N_days_tot);
            stan::math::initialize(new_die, DUMMY_VAR__);
            stan::math::fill(new_die, DUMMY_VAR__);
            current_statement_begin__ = 211;
            validate_non_negative_index("new_asy_dx", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> new_asy_dx(N_days_tot);
            stan::math::initialize(new_asy_dx, DUMMY_VAR__);
            stan::math::fill(new_asy_dx, DUMMY_VAR__);
            current_statement_begin__ = 212;
            validate_non_negative_index("new_sym_dx", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> new_sym_dx(N_days_tot);
            stan::math::initialize(new_sym_dx, DUMMY_VAR__);
            stan::math::fill(new_sym_dx, DUMMY_VAR__);
            current_statement_begin__ = 213;
            validate_non_negative_index("new_sev_dx", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> new_sev_dx(N_days_tot);
            stan::math::initialize(new_sev_dx, DUMMY_VAR__);
            stan::math::fill(new_sev_dx, DUMMY_VAR__);
            current_statement_begin__ = 215;
            validate_non_negative_index("dx_sym_sev", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> dx_sym_sev(N_days_tot);
            stan::math::initialize(dx_sym_sev, DUMMY_VAR__);
            stan::math::fill(dx_sym_sev, DUMMY_VAR__);
            current_statement_begin__ = 216;
            validate_non_negative_index("dx_sym_die", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> dx_sym_die(N_days_tot);
            stan::math::initialize(dx_sym_die, DUMMY_VAR__);
            stan::math::fill(dx_sym_die, DUMMY_VAR__);
            current_statement_begin__ = 217;
            validate_non_negative_index("dx_sev_die", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> dx_sev_die(N_days_tot);
            stan::math::initialize(dx_sev_die, DUMMY_VAR__);
            stan::math::fill(dx_sev_die, DUMMY_VAR__);
            current_statement_begin__ = 219;
            validate_non_negative_index("diag_all", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> diag_all(N_days_tot);
            stan::math::initialize(diag_all, DUMMY_VAR__);
            stan::math::fill(diag_all, DUMMY_VAR__);
            current_statement_begin__ = 220;
            validate_non_negative_index("new_die_dx", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> new_die_dx(N_days_tot);
            stan::math::initialize(new_die_dx, DUMMY_VAR__);
            stan::math::fill(new_die_dx, DUMMY_VAR__);
            current_statement_begin__ = 223;
            validate_non_negative_index("occur_cas", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> occur_cas(N_days_tot);
            stan::math::initialize(occur_cas, DUMMY_VAR__);
            stan::math::fill(occur_cas, DUMMY_VAR__);
            current_statement_begin__ = 224;
            validate_non_negative_index("occur_die", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> occur_die(N_days_tot);
            stan::math::initialize(occur_die, DUMMY_VAR__);
            stan::math::fill(occur_die, DUMMY_VAR__);
            current_statement_begin__ = 228;
            double phi_cas;
            (void) phi_cas;  // dummy to suppress unused var warning
            stan::math::initialize(phi_cas, DUMMY_VAR__);
            stan::math::fill(phi_cas, DUMMY_VAR__);
            current_statement_begin__ = 229;
            double phi_die;
            (void) phi_die;  // dummy to suppress unused var warning
            stan::math::initialize(phi_die, DUMMY_VAR__);
            stan::math::fill(phi_die, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 233;
            stan::math::assign(rr_diag_sym_vs_sev, inv_logit(multiply(spl_basis_dx, spl_par_sym_dx)));
            current_statement_begin__ = 235;
            stan::math::assign(p_diag_if_sym, multiply(p_diag_if_sev, rr_diag_sym_vs_sev));
            current_statement_begin__ = 236;
            stan::math::assign(p_diag_if_asy, multiply(p_diag_if_sym, rr_diag_asy_vs_sym));
            current_statement_begin__ = 244;
            for (int i = 1; i <= Max_delay; ++i) {
                current_statement_begin__ = 245;
                stan::model::assign(sym_diag_delay, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (gamma_cdf((i + 0.0), sym_prg_delay_shap, (sym_prg_delay_rate / scale_dx_delay_sym)) - gamma_cdf((i - 1.0), sym_prg_delay_shap, (sym_prg_delay_rate / scale_dx_delay_sym))), 
                            "assigning variable sym_diag_delay");
                current_statement_begin__ = 249;
                stan::model::assign(sev_diag_delay, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (gamma_cdf((i + 0.0), sev_prg_delay_shap, (sev_prg_delay_rate / scale_dx_delay_sev)) - gamma_cdf((i - 1.0), sev_prg_delay_shap, (sev_prg_delay_rate / scale_dx_delay_sev))), 
                            "assigning variable sev_diag_delay");
            }
            current_statement_begin__ = 259;
            stan::math::assign(p_die_if_inf, ((p_sym_if_inf * p_sev_if_sym) * p_die_if_sev));
            current_statement_begin__ = 266;
            stan::math::assign(logRt, multiply(spl_basis_rt, spl_par_rt));
            current_statement_begin__ = 267;
            stan::math::assign(Rt, stan::math::exp(logRt));
            current_statement_begin__ = 268;
            stan::math::assign(deriv1_log_new_inf, divide(logRt, serial_i));
            current_statement_begin__ = 270;
            stan::math::assign(log_new_inf, cumulative_sum(deriv1_log_new_inf));
            current_statement_begin__ = 271;
            stan::math::assign(log_new_inf, add(subtract(log_new_inf, get_base1(log_new_inf, N_days_before, "log_new_inf", 1)), log_new_inf_0));
            current_statement_begin__ = 272;
            stan::math::assign(new_inf, add(stan::math::exp(log_new_inf), inf_imported));
            current_statement_begin__ = 275;
            for (int i = 1; i <= (N_spl_par_rt - 2); ++i) {
                current_statement_begin__ = 276;
                stan::model::assign(deriv2_spl_par_rt, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (((get_base1(spl_par_rt, (i + 1), "spl_par_rt", 1) * 2) - get_base1(spl_par_rt, i, "spl_par_rt", 1)) - get_base1(spl_par_rt, (i + 2), "spl_par_rt", 1)), 
                            "assigning variable deriv2_spl_par_rt");
            }
            current_statement_begin__ = 279;
            for (int i = 1; i <= (N_spl_par_rt - 1); ++i) {
                current_statement_begin__ = 280;
                stan::model::assign(deriv1_spl_par_rt, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(spl_par_rt, (i + 1), "spl_par_rt", 1) - get_base1(spl_par_rt, i, "spl_par_rt", 1)), 
                            "assigning variable deriv1_spl_par_rt");
            }
            current_statement_begin__ = 289;
            stan::math::assign(new_sym, rep_vector(0, N_days_tot));
            current_statement_begin__ = 290;
            stan::math::assign(new_sev, rep_vector(0, N_days_tot));
            current_statement_begin__ = 291;
            stan::math::assign(new_die, rep_vector(0, N_days_tot));
            current_statement_begin__ = 293;
            for (int i = 1; i <= N_days_tot; ++i) {
                current_statement_begin__ = 294;
                for (int j = 1; j <= Max_delay; ++j) {
                    current_statement_begin__ = 295;
                    if (as_bool(logical_lte((i + (j - 1)), N_days_tot))) {
                        current_statement_begin__ = 296;
                        stan::model::assign(new_sym, 
                                    stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), 
                                    (stan::model::rvalue(new_sym, stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), "new_sym") + ((get_base1(new_inf, i, "new_inf", 1) * p_sym_if_inf) * get_base1(inf_prg_delay, j, "inf_prg_delay", 1))), 
                                    "assigning variable new_sym");
                    }
                }
            }
            current_statement_begin__ = 301;
            for (int i = 1; i <= N_days_tot; ++i) {
                current_statement_begin__ = 302;
                for (int j = 1; j <= Max_delay; ++j) {
                    current_statement_begin__ = 303;
                    if (as_bool(logical_lte((i + (j - 1)), N_days_tot))) {
                        current_statement_begin__ = 304;
                        stan::model::assign(new_sev, 
                                    stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), 
                                    (stan::model::rvalue(new_sev, stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), "new_sev") + ((get_base1(new_sym, i, "new_sym", 1) * p_sev_if_sym) * get_base1(sym_prg_delay, j, "sym_prg_delay", 1))), 
                                    "assigning variable new_sev");
                    }
                }
            }
            current_statement_begin__ = 309;
            for (int i = 1; i <= N_days_tot; ++i) {
                current_statement_begin__ = 310;
                for (int j = 1; j <= Max_delay; ++j) {
                    current_statement_begin__ = 311;
                    if (as_bool(logical_lte((i + (j - 1)), N_days_tot))) {
                        current_statement_begin__ = 312;
                        stan::model::assign(new_die, 
                                    stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), 
                                    (stan::model::rvalue(new_die, stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), "new_die") + ((get_base1(new_sev, i, "new_sev", 1) * p_die_if_sev) * get_base1(sev_prg_delay, j, "sev_prg_delay", 1))), 
                                    "assigning variable new_die");
                    }
                }
            }
            current_statement_begin__ = 320;
            stan::math::assign(new_asy_dx, rep_vector(0, N_days_tot));
            current_statement_begin__ = 322;
            stan::math::assign(new_sym_dx, rep_vector(0, N_days_tot));
            current_statement_begin__ = 323;
            stan::math::assign(dx_sym_sev, rep_vector(0, N_days_tot));
            current_statement_begin__ = 324;
            stan::math::assign(dx_sym_die, rep_vector(0, N_days_tot));
            current_statement_begin__ = 326;
            stan::math::assign(new_sev_dx, rep_vector(0, N_days_tot));
            current_statement_begin__ = 327;
            stan::math::assign(dx_sev_die, rep_vector(0, N_days_tot));
            current_statement_begin__ = 329;
            stan::math::assign(diag_all, rep_vector(0, N_days_tot));
            current_statement_begin__ = 330;
            stan::math::assign(new_die_dx, rep_vector(0, N_days_tot));
            current_statement_begin__ = 339;
            for (int i = 1; i <= N_days_tot; ++i) {
                current_statement_begin__ = 340;
                for (int j = 1; j <= Max_delay; ++j) {
                    current_statement_begin__ = 341;
                    if (as_bool(logical_lte((i + (j - 1)), N_days_tot))) {
                        current_statement_begin__ = 342;
                        stan::model::assign(new_asy_dx, 
                                    stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), 
                                    (stan::model::rvalue(new_asy_dx, stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), "new_asy_dx") + ((((get_base1(new_inf, i, "new_inf", 1) * (1 - p_sym_if_inf)) * (1 - (get_base1(is_weekend, (i + (j - 1)), "is_weekend", 1) * weekend_eff))) * get_base1(p_diag_if_asy, i, "p_diag_if_asy", 1)) * get_base1(asy_rec_delay, j, "asy_rec_delay", 1))), 
                                    "assigning variable new_asy_dx");
                    }
                }
            }
            current_statement_begin__ = 353;
            for (int i = 1; i <= N_days_tot; ++i) {
                current_statement_begin__ = 354;
                for (int j = 1; j <= Max_delay; ++j) {
                    current_statement_begin__ = 355;
                    if (as_bool(logical_lte((i + (j - 1)), N_days_tot))) {
                        current_statement_begin__ = 356;
                        stan::model::assign(new_sym_dx, 
                                    stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), 
                                    (stan::model::rvalue(new_sym_dx, stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), "new_sym_dx") + (((get_base1(new_sym, i, "new_sym", 1) * get_base1(p_diag_if_sym, i, "p_diag_if_sym", 1)) * (1 - (get_base1(is_weekend, (i + (j - 1)), "is_weekend", 1) * weekend_eff))) * get_base1(sym_diag_delay, j, "sym_diag_delay", 1))), 
                                    "assigning variable new_sym_dx");
                    }
                }
            }
            current_statement_begin__ = 366;
            for (int i = 1; i <= N_days_tot; ++i) {
                current_statement_begin__ = 367;
                for (int j = 1; j <= Max_delay; ++j) {
                    current_statement_begin__ = 368;
                    if (as_bool(logical_lte((i + (j - 1)), N_days_tot))) {
                        current_statement_begin__ = 369;
                        stan::model::assign(dx_sym_sev, 
                                    stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), 
                                    (stan::model::rvalue(dx_sym_sev, stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), "dx_sym_sev") + (((get_base1(new_sym, i, "new_sym", 1) * get_base1(p_diag_if_sym, i, "p_diag_if_sym", 1)) * p_sev_if_sym) * get_base1(sym_prg_delay, j, "sym_prg_delay", 1))), 
                                    "assigning variable dx_sym_sev");
                    }
                }
            }
            current_statement_begin__ = 375;
            for (int i = 1; i <= N_days_tot; ++i) {
                current_statement_begin__ = 376;
                for (int j = 1; j <= Max_delay; ++j) {
                    current_statement_begin__ = 377;
                    if (as_bool(logical_lte((i + (j - 1)), N_days_tot))) {
                        current_statement_begin__ = 378;
                        stan::model::assign(dx_sym_die, 
                                    stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), 
                                    (stan::model::rvalue(dx_sym_die, stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), "dx_sym_die") + ((get_base1(dx_sym_sev, i, "dx_sym_sev", 1) * p_die_if_sev) * get_base1(sev_prg_delay, j, "sev_prg_delay", 1))), 
                                    "assigning variable dx_sym_die");
                    }
                }
            }
            current_statement_begin__ = 386;
            for (int i = 1; i <= N_days_tot; ++i) {
                current_statement_begin__ = 387;
                for (int j = 1; j <= Max_delay; ++j) {
                    current_statement_begin__ = 388;
                    if (as_bool(logical_lte((i + (j - 1)), N_days_tot))) {
                        current_statement_begin__ = 389;
                        stan::model::assign(new_sev_dx, 
                                    stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), 
                                    (stan::model::rvalue(new_sev_dx, stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), "new_sev_dx") + ((((get_base1(new_sev, i, "new_sev", 1) - get_base1(dx_sym_sev, i, "dx_sym_sev", 1)) * p_diag_if_sev) * (1 - (get_base1(is_weekend, (i + (j - 1)), "is_weekend", 1) * weekend_eff))) * get_base1(sev_diag_delay, j, "sev_diag_delay", 1))), 
                                    "assigning variable new_sev_dx");
                    }
                }
            }
            current_statement_begin__ = 398;
            for (int i = 1; i <= N_days_tot; ++i) {
                current_statement_begin__ = 399;
                for (int j = 1; j <= Max_delay; ++j) {
                    current_statement_begin__ = 400;
                    if (as_bool(logical_lte((i + (j - 1)), N_days_tot))) {
                        current_statement_begin__ = 401;
                        stan::model::assign(dx_sev_die, 
                                    stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), 
                                    (stan::model::rvalue(dx_sev_die, stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), "dx_sev_die") + ((((get_base1(new_sev, i, "new_sev", 1) - get_base1(dx_sym_sev, i, "dx_sym_sev", 1)) * p_diag_if_sev) * p_die_if_sev) * get_base1(sev_prg_delay, j, "sev_prg_delay", 1))), 
                                    "assigning variable dx_sev_die");
                    }
                }
            }
            current_statement_begin__ = 408;
            stan::math::assign(diag_all, add(add(new_asy_dx, new_sym_dx), new_sev_dx));
            current_statement_begin__ = 409;
            stan::math::assign(new_die_dx, add(dx_sym_die, dx_sev_die));
            current_statement_begin__ = 416;
            stan::math::assign(occur_cas, rep_vector(0, N_days_tot));
            current_statement_begin__ = 417;
            stan::math::assign(occur_die, rep_vector(0, N_days_tot));
            current_statement_begin__ = 421;
            if (as_bool(logical_eq(obs_cas_rep, 1))) {
                current_statement_begin__ = 423;
                for (int i = 1; i <= N_days_tot; ++i) {
                    current_statement_begin__ = 424;
                    for (int j = 1; j <= Max_delay; ++j) {
                        current_statement_begin__ = 425;
                        if (as_bool(logical_lte((i + (j - 1)), N_days_tot))) {
                            current_statement_begin__ = 428;
                            stan::model::assign(occur_cas, 
                                        stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), 
                                        (stan::model::rvalue(occur_cas, stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), "occur_cas") + (get_base1(diag_all, i, "diag_all", 1) * get_base1(cas_rep_delay, j, "cas_rep_delay", 1))), 
                                        "assigning variable occur_cas");
                        }
                    }
                }
            } else {
                current_statement_begin__ = 436;
                for (int i = 1; i <= (N_days_tot - Max_delay); ++i) {
                    current_statement_begin__ = 437;
                    stan::model::assign(occur_cas, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                get_base1(diag_all, i, "diag_all", 1), 
                                "assigning variable occur_cas");
                }
                current_statement_begin__ = 445;
                for (int i = ((N_days_tot - Max_delay) + 1); i <= N_days_tot; ++i) {
                    current_statement_begin__ = 446;
                    stan::model::assign(occur_cas, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (stan::model::rvalue(occur_cas, stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), "occur_cas") + (get_base1(diag_all, i, "diag_all", 1) * get_base1(cas_cum_report_delay, ((N_days_tot - i) + 1), "cas_cum_report_delay", 1))), 
                                "assigning variable occur_cas");
                }
            }
            current_statement_begin__ = 450;
            if (as_bool(logical_eq(obs_die_rep, 1))) {
                current_statement_begin__ = 451;
                for (int i = 1; i <= N_days_tot; ++i) {
                    current_statement_begin__ = 452;
                    for (int j = 1; j <= Max_delay; ++j) {
                        current_statement_begin__ = 453;
                        if (as_bool(logical_lte((i + (j - 1)), N_days_tot))) {
                            current_statement_begin__ = 454;
                            stan::model::assign(occur_die, 
                                        stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), 
                                        (stan::model::rvalue(occur_die, stan::model::cons_list(stan::model::index_uni((i + (j - 1))), stan::model::nil_index_list()), "occur_die") + (get_base1(new_die_dx, i, "new_die_dx", 1) * get_base1(die_rep_delay, j, "die_rep_delay", 1))), 
                                        "assigning variable occur_die");
                        }
                    }
                }
            } else {
                current_statement_begin__ = 459;
                for (int i = 1; i <= (N_days_tot - Max_delay); ++i) {
                    current_statement_begin__ = 460;
                    stan::model::assign(occur_die, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                get_base1(new_die_dx, i, "new_die_dx", 1), 
                                "assigning variable occur_die");
                }
                current_statement_begin__ = 462;
                for (int i = ((N_days_tot - Max_delay) + 1); i <= N_days_tot; ++i) {
                    current_statement_begin__ = 463;
                    stan::model::assign(occur_die, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (stan::model::rvalue(occur_die, stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), "occur_die") + (get_base1(new_die_dx, i, "new_die_dx", 1) * get_base1(die_cum_report_delay, ((N_days_tot - i) + 1), "die_cum_report_delay", 1))), 
                                "assigning variable occur_die");
                }
            }
            current_statement_begin__ = 468;
            stan::math::assign(phi_cas, pow(inv_sqrt_phi_c, -(2)));
            current_statement_begin__ = 469;
            stan::math::assign(phi_die, pow(inv_sqrt_phi_d, -(2)));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t log_new_inf_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < log_new_inf_j_1_max__; ++j_1__) {
                    vars__.push_back(log_new_inf(j_1__));
                }
                size_t new_inf_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < new_inf_j_1_max__; ++j_1__) {
                    vars__.push_back(new_inf(j_1__));
                }
                size_t deriv1_log_new_inf_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < deriv1_log_new_inf_j_1_max__; ++j_1__) {
                    vars__.push_back(deriv1_log_new_inf(j_1__));
                }
                size_t logRt_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < logRt_j_1_max__; ++j_1__) {
                    vars__.push_back(logRt(j_1__));
                }
                size_t Rt_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < Rt_j_1_max__; ++j_1__) {
                    vars__.push_back(Rt(j_1__));
                }
                size_t deriv1_spl_par_rt_j_1_max__ = (N_spl_par_rt - 1);
                for (size_t j_1__ = 0; j_1__ < deriv1_spl_par_rt_j_1_max__; ++j_1__) {
                    vars__.push_back(deriv1_spl_par_rt(j_1__));
                }
                size_t deriv2_spl_par_rt_j_1_max__ = (N_spl_par_rt - 2);
                for (size_t j_1__ = 0; j_1__ < deriv2_spl_par_rt_j_1_max__; ++j_1__) {
                    vars__.push_back(deriv2_spl_par_rt(j_1__));
                }
                size_t rr_diag_sym_vs_sev_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < rr_diag_sym_vs_sev_j_1_max__; ++j_1__) {
                    vars__.push_back(rr_diag_sym_vs_sev(j_1__));
                }
                size_t p_diag_if_asy_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < p_diag_if_asy_j_1_max__; ++j_1__) {
                    vars__.push_back(p_diag_if_asy(j_1__));
                }
                size_t p_diag_if_sym_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < p_diag_if_sym_j_1_max__; ++j_1__) {
                    vars__.push_back(p_diag_if_sym(j_1__));
                }
                size_t sym_diag_delay_j_1_max__ = Max_delay;
                for (size_t j_1__ = 0; j_1__ < sym_diag_delay_j_1_max__; ++j_1__) {
                    vars__.push_back(sym_diag_delay(j_1__));
                }
                size_t sev_diag_delay_j_1_max__ = Max_delay;
                for (size_t j_1__ = 0; j_1__ < sev_diag_delay_j_1_max__; ++j_1__) {
                    vars__.push_back(sev_diag_delay(j_1__));
                }
                vars__.push_back(p_die_if_inf);
                size_t new_sym_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < new_sym_j_1_max__; ++j_1__) {
                    vars__.push_back(new_sym(j_1__));
                }
                size_t new_sev_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < new_sev_j_1_max__; ++j_1__) {
                    vars__.push_back(new_sev(j_1__));
                }
                size_t new_die_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < new_die_j_1_max__; ++j_1__) {
                    vars__.push_back(new_die(j_1__));
                }
                size_t new_asy_dx_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < new_asy_dx_j_1_max__; ++j_1__) {
                    vars__.push_back(new_asy_dx(j_1__));
                }
                size_t new_sym_dx_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < new_sym_dx_j_1_max__; ++j_1__) {
                    vars__.push_back(new_sym_dx(j_1__));
                }
                size_t new_sev_dx_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < new_sev_dx_j_1_max__; ++j_1__) {
                    vars__.push_back(new_sev_dx(j_1__));
                }
                size_t dx_sym_sev_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < dx_sym_sev_j_1_max__; ++j_1__) {
                    vars__.push_back(dx_sym_sev(j_1__));
                }
                size_t dx_sym_die_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < dx_sym_die_j_1_max__; ++j_1__) {
                    vars__.push_back(dx_sym_die(j_1__));
                }
                size_t dx_sev_die_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < dx_sev_die_j_1_max__; ++j_1__) {
                    vars__.push_back(dx_sev_die(j_1__));
                }
                size_t diag_all_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < diag_all_j_1_max__; ++j_1__) {
                    vars__.push_back(diag_all(j_1__));
                }
                size_t new_die_dx_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < new_die_dx_j_1_max__; ++j_1__) {
                    vars__.push_back(new_die_dx(j_1__));
                }
                size_t occur_cas_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < occur_cas_j_1_max__; ++j_1__) {
                    vars__.push_back(occur_cas(j_1__));
                }
                size_t occur_die_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < occur_die_j_1_max__; ++j_1__) {
                    vars__.push_back(occur_die(j_1__));
                }
                vars__.push_back(phi_cas);
                vars__.push_back(phi_die);
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 545;
            double p_die_if_sym;
            (void) p_die_if_sym;  // dummy to suppress unused var warning
            stan::math::initialize(p_die_if_sym, DUMMY_VAR__);
            stan::math::fill(p_die_if_sym, DUMMY_VAR__);
            current_statement_begin__ = 546;
            validate_non_negative_index("diag_cases", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> diag_cases(N_days_tot);
            stan::math::initialize(diag_cases, DUMMY_VAR__);
            stan::math::fill(diag_cases, DUMMY_VAR__);
            current_statement_begin__ = 547;
            validate_non_negative_index("cumulative_incidence", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> cumulative_incidence(N_days_tot);
            stan::math::initialize(cumulative_incidence, DUMMY_VAR__);
            stan::math::fill(cumulative_incidence, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 550;
            stan::math::assign(cumulative_incidence, cumulative_sum(new_inf));
            current_statement_begin__ = 551;
            stan::math::assign(p_die_if_sym, (p_die_if_sev * p_sev_if_sym));
            current_statement_begin__ = 552;
            stan::math::assign(diag_cases, add(new_sym_dx, new_sev_dx));
            // validate, write generated quantities
            current_statement_begin__ = 545;
            vars__.push_back(p_die_if_sym);
            current_statement_begin__ = 546;
            size_t diag_cases_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < diag_cases_j_1_max__; ++j_1__) {
                vars__.push_back(diag_cases(j_1__));
            }
            current_statement_begin__ = 547;
            size_t cumulative_incidence_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < cumulative_incidence_j_1_max__; ++j_1__) {
                vars__.push_back(cumulative_incidence(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_stan_program_default";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_new_inf_0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "serial_i";
        param_names__.push_back(param_name_stream__.str());
        size_t spl_par_rt_j_1_max__ = N_spl_par_rt;
        for (size_t j_1__ = 0; j_1__ < spl_par_rt_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "spl_par_rt" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "inf_imported";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_sym_if_inf";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_sev_if_sym";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_die_if_sev";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "scale_dx_delay_asy";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "scale_dx_delay_sym";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "scale_dx_delay_sev";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rr_diag_asy_vs_sym";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_diag_if_sev";
        param_names__.push_back(param_name_stream__.str());
        size_t spl_par_sym_dx_j_1_max__ = N_spl_par_dx;
        for (size_t j_1__ = 0; j_1__ < spl_par_sym_dx_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "spl_par_sym_dx" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "weekend_eff";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "inv_sqrt_phi_c";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "inv_sqrt_phi_d";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t log_new_inf_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_new_inf_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_new_inf" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t new_inf_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < new_inf_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "new_inf" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t deriv1_log_new_inf_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < deriv1_log_new_inf_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "deriv1_log_new_inf" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t logRt_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < logRt_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "logRt" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t Rt_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < Rt_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Rt" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t deriv1_spl_par_rt_j_1_max__ = (N_spl_par_rt - 1);
            for (size_t j_1__ = 0; j_1__ < deriv1_spl_par_rt_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "deriv1_spl_par_rt" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t deriv2_spl_par_rt_j_1_max__ = (N_spl_par_rt - 2);
            for (size_t j_1__ = 0; j_1__ < deriv2_spl_par_rt_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "deriv2_spl_par_rt" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t rr_diag_sym_vs_sev_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < rr_diag_sym_vs_sev_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rr_diag_sym_vs_sev" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t p_diag_if_asy_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < p_diag_if_asy_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_diag_if_asy" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t p_diag_if_sym_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < p_diag_if_sym_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_diag_if_sym" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t sym_diag_delay_j_1_max__ = Max_delay;
            for (size_t j_1__ = 0; j_1__ < sym_diag_delay_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sym_diag_delay" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t sev_diag_delay_j_1_max__ = Max_delay;
            for (size_t j_1__ = 0; j_1__ < sev_diag_delay_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sev_diag_delay" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "p_die_if_inf";
            param_names__.push_back(param_name_stream__.str());
            size_t new_sym_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < new_sym_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "new_sym" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t new_sev_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < new_sev_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "new_sev" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t new_die_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < new_die_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "new_die" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t new_asy_dx_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < new_asy_dx_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "new_asy_dx" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t new_sym_dx_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < new_sym_dx_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "new_sym_dx" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t new_sev_dx_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < new_sev_dx_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "new_sev_dx" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t dx_sym_sev_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < dx_sym_sev_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "dx_sym_sev" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t dx_sym_die_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < dx_sym_die_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "dx_sym_die" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t dx_sev_die_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < dx_sev_die_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "dx_sev_die" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t diag_all_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < diag_all_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "diag_all" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t new_die_dx_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < new_die_dx_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "new_die_dx" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t occur_cas_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < occur_cas_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "occur_cas" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t occur_die_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < occur_die_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "occur_die" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi_cas";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi_die";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_die_if_sym";
        param_names__.push_back(param_name_stream__.str());
        size_t diag_cases_j_1_max__ = N_days_tot;
        for (size_t j_1__ = 0; j_1__ < diag_cases_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "diag_cases" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t cumulative_incidence_j_1_max__ = N_days_tot;
        for (size_t j_1__ = 0; j_1__ < cumulative_incidence_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "cumulative_incidence" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_new_inf_0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "serial_i";
        param_names__.push_back(param_name_stream__.str());
        size_t spl_par_rt_j_1_max__ = N_spl_par_rt;
        for (size_t j_1__ = 0; j_1__ < spl_par_rt_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "spl_par_rt" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "inf_imported";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_sym_if_inf";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_sev_if_sym";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_die_if_sev";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "scale_dx_delay_asy";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "scale_dx_delay_sym";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "scale_dx_delay_sev";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rr_diag_asy_vs_sym";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_diag_if_sev";
        param_names__.push_back(param_name_stream__.str());
        size_t spl_par_sym_dx_j_1_max__ = N_spl_par_dx;
        for (size_t j_1__ = 0; j_1__ < spl_par_sym_dx_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "spl_par_sym_dx" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "weekend_eff";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "inv_sqrt_phi_c";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "inv_sqrt_phi_d";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t log_new_inf_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_new_inf_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_new_inf" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t new_inf_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < new_inf_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "new_inf" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t deriv1_log_new_inf_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < deriv1_log_new_inf_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "deriv1_log_new_inf" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t logRt_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < logRt_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "logRt" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t Rt_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < Rt_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Rt" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t deriv1_spl_par_rt_j_1_max__ = (N_spl_par_rt - 1);
            for (size_t j_1__ = 0; j_1__ < deriv1_spl_par_rt_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "deriv1_spl_par_rt" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t deriv2_spl_par_rt_j_1_max__ = (N_spl_par_rt - 2);
            for (size_t j_1__ = 0; j_1__ < deriv2_spl_par_rt_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "deriv2_spl_par_rt" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t rr_diag_sym_vs_sev_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < rr_diag_sym_vs_sev_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rr_diag_sym_vs_sev" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t p_diag_if_asy_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < p_diag_if_asy_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_diag_if_asy" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t p_diag_if_sym_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < p_diag_if_sym_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_diag_if_sym" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t sym_diag_delay_j_1_max__ = Max_delay;
            for (size_t j_1__ = 0; j_1__ < sym_diag_delay_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sym_diag_delay" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t sev_diag_delay_j_1_max__ = Max_delay;
            for (size_t j_1__ = 0; j_1__ < sev_diag_delay_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sev_diag_delay" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "p_die_if_inf";
            param_names__.push_back(param_name_stream__.str());
            size_t new_sym_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < new_sym_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "new_sym" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t new_sev_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < new_sev_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "new_sev" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t new_die_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < new_die_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "new_die" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t new_asy_dx_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < new_asy_dx_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "new_asy_dx" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t new_sym_dx_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < new_sym_dx_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "new_sym_dx" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t new_sev_dx_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < new_sev_dx_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "new_sev_dx" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t dx_sym_sev_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < dx_sym_sev_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "dx_sym_sev" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t dx_sym_die_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < dx_sym_die_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "dx_sym_die" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t dx_sev_die_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < dx_sev_die_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "dx_sev_die" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t diag_all_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < diag_all_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "diag_all" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t new_die_dx_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < new_die_dx_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "new_die_dx" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t occur_cas_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < occur_cas_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "occur_cas" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t occur_die_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < occur_die_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "occur_die" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi_cas";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi_die";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_die_if_sym";
        param_names__.push_back(param_name_stream__.str());
        size_t diag_cases_j_1_max__ = N_days_tot;
        for (size_t j_1__ = 0; j_1__ < diag_cases_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "diag_cases" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t cumulative_incidence_j_1_max__ = N_days_tot;
        for (size_t j_1__ = 0; j_1__ < cumulative_incidence_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "cumulative_incidence" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_stan_program_default_namespace::model_stan_program_default stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
