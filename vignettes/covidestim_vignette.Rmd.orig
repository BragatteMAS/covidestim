---
title: "Using Covidestim"
author: "Melanie H. Chitwood, Marcus Russi" 
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Using Covidestim}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---
**This vignette is intended to guide users through running the covidestim model and 
accessing the model output.**

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

```{r setup}
library(covidestim)
```

## Running the model 
### Data
Will we demonstrate how to use the covidestim paackage using data from the [Massachusetts Department of Public Health](https://www.mass.gov/info-details/archive-of-covid-19-cases-in-massachusetts) 
Users can use case and/or death data with the model. Data on the fraction of tests with a positive results may also be used; we strongly recommend users smooth fraciton positive data using a moving average or spline. Each data type should be entered as its own dataframe with two columns: a column called 'date' and a column called 'observation.' 

```{r, echo=FALSE, message=FALSE}
d <- readr::read_csv("input_data.csv")
df.cases   <- dplyr::transmute(d, date, observation = cases)
df.deaths  <- dplyr::transmute(d, date, observation = deaths)
df.fracpos <- dplyr::transmute(d, date, observation = fraction.positive)
```
```{r}
head(df.cases)
```
### Generate a model configuration 
Inpute data and model run options are summarized into a covidestim configuration with the funciton call [`covidestim()`](\code{?covidestim}). Users must specify the number of days of data in the input data. More information on data formating can be found [here](\code{?input_cases}). Calling `covidestim()` will produce a summary of model run conditions, priors, and data inputs. 
```{r}
covidestim(ndays = nrow(df.cases)) 
```
Notice that what we input is **not** a valid model configuration because it does not contain data! Each dataframe must be added to the covidestim call using calls [`input_cases()`](\code{?input_cases}),  [`input_deaths()`](\code{?input_deaths}), and [`input_fracpos()`](\code{?input_fracpos}). Whether the data are by date-of-occurrence (e.g date of test specimen collection, date of death) or by date-of-report (e.g. daily updates to cumulative case and death counts) must be noted.   
  
Because we use date-of-occurrence data, we choose to enable the 'weekend effect.' As individuals are less likely to be tested on Saturdays and Sundays, enabling the weekend effect allows the model to estimate a systematically lower probability of diagnosis on the weekend. This generally improves model fit to data when the data are by date-of-occurrence. 
For additional information about changing the base configuration of the model, see [`covidestim()`](\code{?covidestim}). 
```{r}
config1 <-
covidestim(ndays = nrow(df.cases), weekend = TRUE) +
  input_cases(df.cases, type = "occurred") + 
  input_deaths(df.cases, type = "occurred") + 
  input_fracpos(df.fracpos)
config1
```
### Initializing a model run
Finally, the model is run with the call [`run`](\code{?run}). Do not forget to assign the a name to the output of the run. Runtimes vary depending on the size and quality of the data, and may take over an hour. If you are running the model in RStudio, periodic status updates will appear in the console. 
```{r, eval = FALSE}
output <- run(config1, cores = parallel::detectCores())
```

## Accessing model output 
Calling `run()` on a valid covidestim configuration will produce a S3 object of class `covidestim_result`. Here, we describe the summary functions in covidestim to view model results. In the vignette [Acessing Covidestim Results Object](https://www.covidestim.org/articles/covidestim_vignette.html) we describe the various items within `covidestim_result`.  

### Summarizing covidestim output
A covidestim object can be easily converted to a summary data frame with the call [`summary`](\code{?summary}). Each row of the data frame is a date. Each column of the data frame is a value of interest. Variables appened with .hi or .lo indicate the 0.975 and 0.025 quantiles, respectively. A data dictionary for summarized results can be found [here](\code{?summary}). 

```{r, eval = FALSE}
output.summary <- summary(output)
```
```{r}
print(output.summary[40:45, 1:5])
```

The posterior distributions of key time-invariant parameters can also be summarized with the call [`summaryEpi`](\?code{?summaryEpi})

```{r}
covidestim::summaryEpi(output)
```
Note that p_diag_if_sym (the probability a symptomatic case is diagnosed) and p_diag_if_sev (the probability that a severe case is diagnosed) are summarized without the adjustment for changing diagnostic coverage. 

## Visualizing model output
Model results can be visualized with a the call [`viz`](\code{?viz}). Three figures will be produced: 

```{r, eval = FALSE}
visual <- covidestim::viz(output)
```
```{r}
summary.default(visual)
```

The figure 'observedVsFitted' plots the observed cases and deaths (the input data) against the modeled values for reported cases and deaths. In the plot bellow, note that the effect of weekends on detection and reporting can be clearly observed in both the input data and in the model output. 

```{r}
visual$observedVsFitted
```

The figure 'infectionsAndCases' plots modeled reported cases against modeled 'true' new infections. The latter is what we estimate to be the complete, un-lagged time series of incident infections that would give rise to the trends we observe in the case and death data. 
```{r}
visual$infectionsAndCases
```

Finlly, 'RtEstim' is the estimated effective reproduction number (Rt) based on the modeled time series of new infections. These estimates are produced using the [EpiEstim package for R](https://cran.r-project.org/web/packages/EpiEstim/index.html). We use a five-day moving average. Values are plotted on the middle day of the moving average (e.g. the Rt estimate for March 16 is the average Rt over the period March 14 - March 18). 

```{r}
visual$RtEstim
```





